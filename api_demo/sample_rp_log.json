[
  {
    "conversation": "Detective Sam Carter entered the dimly lit room. \"What a mess!\", he muttered, surveying the scattered papers and overturned furniture. The victim, a local journalist, lay sprawled on the floor, a pen still clutched in his hand.\n(User: Sam knelt beside the body, examining the scene. \"Looks like he was onto something big. But what?\" He noticed a torn piece of paper sticking out from under the desk.)",
    "new_declarations": "sam_carter: Sam Carter, a detective\nroom: A dimly lit room\npapers: Scattered papers\nfurniture: Overturned furniture\njournalist: A local journalist, the victim\nfloor: The floor of the room\npen: A pen clutched in the victim's hand\ndesk: A desk in the room\npiece_of_paper: A torn piece of paper\n\nenter_location(a, b, t): character [a] enters location [b] at time [t]\nis_mess(a, t): location [a] is a mess at time [t]\nlay_on(a, b, t): character [a] lays on location [b] at time [t]\nclutch_item(a, b, t): character [a] clutches item [b] at time [t]\nnotice_item(a, b, t): character [a] notices item [b] at time [t]\nstick_out_from(a, b, t): item [a] sticks out from location [b] at time [t]\n",
    "pseudo_predefinitions": "None\nNone",
    "formula": "Scope:\nenter_location(sam_carter, room, T1)\nis_mess(room, T1)\nlay_on(journalist, floor, T1)\nclutch_item(journalist, pen, T1)\nnotice_item(sam_carter, piece_of_paper, T2)\nstick_out_from(piece_of_paper, desk, T2)\nT0 < T1\nT1 < T2\n",
    "result": 0
  },
  {
    "conversation": "Carefully, he pulled it free. It was a fragment of a map, marked with an 'X' in red ink. \"This could be the key to solving this case,\" he thought.\n(User: Sam stood up, pocketing the map. \"I need to find out where this leads. But first, I should check the victim's contacts. Maybe someone knows what he was working on.\")",
    "new_declarations": "map_fragment: A fragment of a map\nx_mark: An 'X' marked on the map\nred_ink: Red ink used to mark the map\ncase: The case being investigated\nsam: Sam, the character\nthought: Sam's thought about the map\nwhere_it_leads: Where the map leads\nvictim_contacts: The victim's contacts\nvictim_work: What the victim was working on\nsomeone: Someone who knows the victim's work\n\npull_free(a, b, t): character [a] pulls item [b] free at time [t]\nis_fragment_of(a, b, t): item [a] is a fragment of item [b] at time [t]\nmark_with(a, b, c, t): item [a] is marked with [b] using [c] at time [t]\nis_key_to(a, b, t): item [a] is the key to [b] at time [t]\nhave_thought(a, b, t): character [a] has thought [b] at time [t]\nstand_up(a, t): character [a] stands up at time [t]\npocket_item(a, b, t): character [a] pockets item [b] at time [t]\nneed_to_find_out(a, b, t): character [a] needs to find out [b] at time [t]\nshould_check(a, b, t): character [a] should check [b] at time [t]\nknow_about(a, b, c, t): character [a] knows about [b] working on [c] at time [t]\n",
    "pseudo_predefinitions": "None\nforall(a b t). pull_free(a, b, t) -> not(clutch_item(a, b, t))\n",
    "formula": "Scope:\nForAll([a, b, t],\n       Implies(pull_free(a, b, t),\n               Not(clutch_item(a, b, t))))\npull_free(sam, map_fragment, T3)\nis_fragment_of(map_fragment, map, T3)\nmark_with(map_fragment, x_mark, red_ink, T3)\nstand_up(sam, T4)\npocket_item(sam, map_fragment, T4)\nneed_to_find_out(sam, where_it_leads, T4)\nshould_check(sam, victim_contacts, T4)\nExists(someone, know_about(sam, victim_work, someone, T4))\nT3 < T4\nScope:\nis_key_to(map_fragment, case, T3)\n",
    "result": 0
  },
  {
    "conversation": "He made his way to the victim's office, where a cluttered desk held a computer and a stack of files. As he booted up the computer, a message popped up on the screen: \"If you find this, I\u2019m in trouble. Meet me at the old warehouse by the docks.\"\n(User: Sam's heart raced. \"Looks like I\u2019m not the only one looking for answers. I need to get to that warehouse before it\u2019s too late.\")",
    "new_declarations": "office: The victim's office, a location\ndesk: A cluttered desk, a piece of furniture\ncomputer: A computer on the desk, an item\nstack_of_files: A stack of files on the desk, an item\nmessage: A message on the computer screen, a piece of information\nwarehouse: An old warehouse by the docks, a location\ndocks: The docks, a location\nsam: Sam, the character\nanswers: Answers to the case, a concept\n\nis_in(a, b, t): item [a] is in location [b] at time [t]\nis_on(a, b, t): item [a] is on location [b] at time [t]\npop_up_on(a, b, t): item [a] pops up on item [b] at time [t]\nmeet_at(a, b, c, t): character [a] should meet character [b] at location [c] at time [t]\nneed_to_get_to(a, b, t): character [a] needs to get to location [b] at time [t]\nlook_for(a, b, t): character [a] is looking for [b] at time [t]\n",
    "pseudo_predefinitions": "None\nforall(a b t). is_on(a, b, t) -> is_in(a, b, t)\nforall(a b c t). meet_at(a, b, c, t) -> need_to_get_to(a, c, t)",
    "formula": "Scope:\nForAll([a, b, t], Implies(is_on(a, b, t), is_in(a, b, t)))\nForAll([a, b, c, t],\n       Implies(meet_at(a, b, c, t), need_to_get_to(a, c, t)))\nis_in(computer, office, T5)\nis_on(computer, desk, T5)\nis_on(stack_of_files, desk, T5)\npop_up_on(message, computer, T5)\nmeet_at(victim, unknown, warehouse, T5)\nScope:\nneed_to_get_to(sam, warehouse, T6)\nlook_for(sam, answers, T6)\n",
    "result": 0
  },
  {
    "conversation": "He grabbed his coat and headed out, the rain pouring down as he made his way to the docks. The old warehouse loomed ahead, its windows dark and foreboding.\n(User: Sam approached cautiously, scanning the area for any signs of life. \"This place gives me the creeps,\" he muttered, pushing the door open.)",
    "new_declarations": "sam: Sam, the character\ncoat: A coat, an item of clothing\nrain: Rain, a weather condition\ndocks: The docks, a location\nwarehouse: An old warehouse by the docks, a location\narea: The area around Sam, a location\nsign_of_life: Signs of life, a concept\ndoor: The door of the warehouse, an item\ncreeps: The creeps, a feeling\n\ngrab_item(a, b, t): character [a] grabs item [b] at time [t]\nhead_out(a, t): character [a] heads out at time [t]\npour_down(a, t): weather condition [a] pours down at time [t]\nmake_way_to(a, b, t): character [a] makes way to location [b] at time [t]\nloom_ahead(a, b, t): location [a] looms ahead of character [b] at time [t]\nis_dark(a, t): location [a] is dark at time [t]\napproach_cautiously(a, t): character [a] approaches cautiously at time [t]\nscan_location(a, b, t): character [a] scans location [b] at time [t]\nlook_for(a, b, t): character [a] is looking for [b] at time [t]\nmutter(a, b, t): character [a] mutters [b] at time [t]\npush_open(a, b, t): character [a] pushes open item [b] at time [t]\ngive_feeling(a, b, c, t): location [a] gives feeling [b] to character [c] at time [t]\n",
    "pseudo_predefinitions": "None\nforall(a b t). grab_item(a, b, t) -> notice_item(a, b, t)\nforall(a t). head_out(a, t) -> enter_location(a, area, t)\nforall(a b t). make_way_to(a, b, t) -> need_to_get_to(a, b, t)",
    "formula": "Scope:\nForAll([a, b, t],\n       Implies(grab_item(a, b, t), notice_item(a, b, t)))\nForAll([a, t],\n       Implies(head_out(a, t), enter_location(a, area, t)))\nForAll([a, b, t],\n       Implies(make_way_to(a, b, t),\n               need_to_get_to(a, b, t)))\ngrab_item(sam, coat, T7)\nhead_out(sam, T7)\npour_down(rain, T7)\nmake_way_to(sam, docks, T7)\nloom_ahead(warehouse, sam, T7)\nis_dark(warehouse, T7)\napproach_cautiously(sam, T8)\nscan_location(sam, area, T8)\npush_open(sam, door, T8)\nScope:\ngive_feeling(warehouse, creeps, sam, T8)\n",
    "result": 0
  },
  {
    "conversation": "Inside, the air was thick with dust and the smell of saltwater. Shadows danced in the corners as he stepped further in. Suddenly, a figure emerged from the darkness. \"You\u2019re late,\" the figure said, voice low and gravelly.\n(User: Sam squinted, trying to make out the face. \"Who are you? And what do you know about the journalist?\")",
    "new_declarations": "air: The air inside, a concept\ndust: Dust in the air, an item\nsmell: The smell of saltwater, a concept\nsaltwater: Saltwater, a type of water\nshadows: Shadows in the corners, a visual effect\ncorner: The corners of the room, a location\nfigure: A figure emerged from the darkness, a character\ndarkness: The darkness, a concept\nvoice: The figure's voice, a concept\nstatement: The figure's statement, a concept\n\nis_thick_with(a, b, c, t): location [a] is thick with [b] and [c] at time [t]\nsmell_of(a, b, t): smell [a] is the smell of [b] at time [t]\ndance_in(a, b, t): shadows [a] dance in location [b] at time [t]\nemerge_from(a, b, t): character [a] emerges from location [b] at time [t]\nsay_something(a, b, t): character [a] says statement [b] at time [t]\nis_low(a, t): voice [a] is low at time [t]\nis_gravelly(a, t): voice [a] is gravelly at time [t]\nsquint(a, t): character [a] squint at time [t]\ntry_to_make_out(a, b, t): character [a] tries to make out [b] at time [t]\nknow_about(a, b, c, t): character [a] knows about [b] working on [c] at time [t]\n",
    "pseudo_predefinitions": "None\nforall(a b c t). is_thick_with(a, b, c, t) -> (is_in(b, a, t) and is_in(c, a, t))\nforall(a b t). smell_of(a, b, t)\nforall(a b t). emerge_from(a, b, t) -> is_in(a, b, t)\n",
    "formula": "Scope:\nForAll([a, b, c, t],\n       Implies(is_thick_with(a, b, c, t),\n               And(is_in(b, a, t), is_in(c, a, t))))\nForAll([a, b, t], smell_of(a, b, t))\nForAll([a, b, t],\n       Implies(emerge_from(a, b, t), is_in(a, b, t)))\nis_thick_with(air, dust, smell, T9)\nsmell_of(smell, saltwater, T9)\ndance_in(shadows, corner, T9)\nemerge_from(figure, darkness, T9)\nsay_something(figure, statement, T9)\nis_low(voice, T9)\nis_gravelly(voice, T9)\nsquint(sam, T10)\ntry_to_make_out(sam, figure, T10)\nknow_about(figure, sam, journalist, T10)\n",
    "result": 0
  },
  {
    "conversation": "The figure stepped into the light, revealing a familiar face. It was Mia, a former colleague of the journalist. \"I know he was onto something big, and now they\u2019re after me too,\" she said, glancing nervously around the warehouse.\n(User: Sam felt a surge of adrenaline. \"We need to get out of here. But first, tell me everything you know about the map and what he was investigating.)\"",
    "new_declarations": "mia: Mia, a former colleague of the journalist\ncolleague: A colleague, a type of relationship\nadrenaline: Adrenaline, a physiological response\nmap: A map related to the investigation\neverything: Everything Mia knows, a concept\n\nstep_into(a, b, c, t): character [a] steps into [b] revealing [c] at time [t]\nis_familiar_face(a, b): [a] is the familiar face of [b]\nis_former(a, b, c, t): character [a] is a former [b] of [c] at time [t]\nknow_about(a, b, t): character [a] knows about [b] at time [t]\nbe_after(a, b, t): character [a] is after character [b] at time [t]\nglance_around(a, b, t): character [a] glances around location [b] at time [t]\nfeel_surge_of(a, b, t): character [a] feels a surge of [b] at time [t]\nneed_to_do(a, b, t): character [a] needs to do [b] at time [t]\ntell_me(a, b, c, t): character [a] tells character [b] about [c] at time [t]\ninvestigate(a, b, t): character [a] is investigating [b] at time [t]\n",
    "pseudo_predefinitions": "None\nforall(a b c t). is_former(a, b, c, t) -> is_former(a, b, c, t)\nforall(a b t). tell_me(a, sam, b, t) -> know_about(a, b, t)\nforall(a b t). investigate(a, b, t) -> need_to_do(a, investigate(a, b, t), t)\n",
    "formula": "Scope:\nForAll([a, b, c, t],\n       Implies(is_former(a, b, c, t), is_former(a, b, c, t)))\nForAll([a, b, t],\n       Implies(tell_me(a, sam, b, t), know_about(a, b, t)))\nForAll([a, b, t],\n       Implies(investigate(a, b, t),\n               need_to_do(a,\n                          If(investigate(a, b, t), 1, 0),\n                          t)))\nstep_into(mia, light, mia, T11)\nis_familiar_face(mia, sam)\nis_former(mia, colleague, journalist, T11)\nknow_about(mia, journalist_investigation, T11)\nbe_after(they, mia, T11)\nfeel_surge_of(sam, adrenaline, T12)\nneed_to_do(sam, get_out_of_here, T12)\ntell_me(sam, mia, everything, T12)\ninvestigate(journalist, map, T11)\n",
    "result": 0
  },
  {
    "conversation": "Mia took a deep breath, her eyes darting to the shadows. \"He was investigating a smuggling ring operating out of the docks. The map leads to their hideout. If we can get there first, we might find the evidence we need to take them down.\"\n(User: Sam nodded, determination in his eyes. \"Let\u2019s move. We don\u2019t have much time before they realize we\u2019re onto them.\")",
    "new_declarations": "mia: Mia, a character\nbreath: A deep breath taken by Mia, an action\neyes: Mia's eyes, a body part\nshadows: Shadows, a visual effect\nsmuggling_ring: A smuggling ring, an organization\ndocks: The docks, a location\nmap: A map, an item\nhideout: The hideout of the smuggling ring, a location\nevidence: Evidence needed to take down the smuggling ring, a concept\nsam: Sam, a character\ndetermination: Determination in Sam's eyes, a concept\ntime: Time, a concept\n\ntake_breath(a, t): character [a] takes a breath at time [t]\ndart_to(a, b, t): body part [a] darts to location [b] at time [t]\ninvestigate(a, b, t): character [a] is investigating [b] at time [t]\noperate_out_of(a, b, t): organization [a] operates out of location [b] at time [t]\nlead_to(a, b, t): item [a] leads to location [b] at time [t]\ncan_find(a, b, t): character [a] can find [b] at time [t]\nneed_to_take_down(a, b, t): character [a] needs to take down [b] at time [t]\nnod(a, t): character [a] nods at time [t]\nhave_determination(a, b, t): character [a] has [b] at time [t]\nmove(a, t): character [a] moves at time [t]\nhave_time(a, b, t): character [a] has [b] at time [t]\nrealize(a, b, t): character [a] realizes [b] at time [t]\nis_onto(a, b, t): character [a] is onto character [b] at time [t]\n",
    "pseudo_predefinitions": "None\nforall(a b t). operate_out_of(a, b, t) -> is_in(a, b, t)\nforall(a b t). lead_to(a, b, t) -> need_to_get_to(a, b, t)\nforall(a b t). need_to_take_down(a, b, t) -> be_after(a, b, t)",
    "formula": "Scope:\nForAll([a, b, t],\n       Implies(operate_out_of(a, b, t), is_in(a, b, t)))\nForAll([a, b, t],\n       Implies(lead_to(a, b, t), need_to_get_to(a, b, t)))\nForAll([a, b, t],\n       Implies(need_to_take_down(a, b, t),\n               be_after(a, b, t)))\nnod(sam, T14)\nhave_determination(sam, determination, T14)\nmove(sam, T14)\nhave_time(sam, time, T14)\nrealize(smuggling_ring,\n        If(is_onto(sam, smuggling_ring, T14), 1, 0),\n        T14)\nT13 < T14\nScope:\ninvestigate(journalist, smuggling_ring, T13)\noperate_out_of(smuggling_ring, docks, T13)\nlead_to(map, hideout, T13)\ncan_find(mia, evidence, T13)\nneed_to_take_down(mia, smuggling_ring, T13)\n",
    "result": 0
  },
  {
    "conversation": "They made their way through the maze of crates and barrels, the sound of footsteps echoing in the distance. Just as they reached the exit, a group of men in masks appeared, blocking their path.\n(User: Sam cursed under his breath. \"Looks like we\u2019re not the only ones interested in that map. We need to fight our way out of here!\")",
    "new_declarations": "maze: A maze, a location\ncrates: Crates, items\nbarrels: Barrels, items\nsound: The sound of footsteps, a concept\nfootsteps: Footsteps, a type of sound\ndistance: The distance, a concept\nexit: The exit, a location\ngroup: A group of men, a collection of characters\nmen: Men, characters\nmasks: Masks, items\npath: Their path, a concept\nsam: Sam, a character\n\nmake_way_through(a, b, t): character [a] makes way through location [b] at time [t]\nconsist_of(a, b, c, t): location [a] consists of items [b] and [c] at time [t]\nhear_sound(a, b, t): character [a] hears sound [b] at time [t]\necho_in(a, b, t): sound [a] echoes in location [b] at time [t]\nreach_location(a, b, t): character [a] reaches location [b] at time [t]\nappear_at(a, b, t): character [a] appears at location [b] at time [t]\nblock_location(a, b, t): character [a] blocks location [b] at time [t]\ncurse(a, b, t): character [a] curses [b] at time [t]\nbe_interested_in(a, b, t): character [a] is interested in item [b] at time [t]\nneed_to_do(a, b, t): character [a] needs to do [b] at time [t]\nfight_way_out_of(a, b, t): character [a] fights way out of location [b] at time [t]\n",
    "pseudo_predefinitions": "None\nforall(a b c t). consist_of(a, b, c, t) -> (is_in(b, a, t) and is_in(c, a, t))\nforall(a b t). reach_location(a, b, t) -> enter_location(a, b, t)",
    "formula": "Scope:\nForAll([a, b, c, t],\n       Implies(consist_of(a, b, c, t),\n               And(is_in(b, a, t), is_in(c, a, t))))\nForAll([a, b, t],\n       Implies(reach_location(a, b, t),\n               enter_location(a, b, t)))\nmake_way_through(sam, maze, T15)\nconsist_of(maze, crates, barrels, T15)\necho_in(footsteps, distance, T15)\nhear_sound(sam, footsteps, T15)\nreach_location(sam, exit, T15)\nappear_at(group, exit, T15)\nblock_location(group, path, T15)\nScope:\ncurse(sam, under_breath, T15)\nbe_interested_in(group, map, T15)\nneed_to_do(sam,\n           If(fight_way_out_of(sam, maze, T15), 1, 0),\n           T15)\n",
    "result": 0
  },
  {
    "conversation": "With adrenaline pumping, Sam and Mia charged forward, dodging punches and throwing their own. The fight was chaotic, but they managed to push through the group and escape into the night.\n(User: Breathing heavily, Sam glanced at Mia. \"We need to get to that hideout before they regroup. Let\u2019s go!\")",
    "new_declarations": "sam: Sam, a character\nmia: Mia, a character\nadrenaline: Adrenaline, a physiological response\npunch: A punch, an action\nfight: A fight, an event\ngroup: A group of men, a collection of characters\nnight: The night, a time\nhideout: A hideout, a location\n\nfeel_surge_of(a, b, t): character [a] feels a surge of [b] at time [t]\ncharge_forward(a, t): character [a] charges forward at time [t]\ndodge(a, b, t): character [a] dodges [b] at time [t]\nthrow(a, b, t): character [a] throws [b] at time [t]\nis_chaotic(a, t): event [a] is chaotic at time [t]\nmake_way_through(a, b, t): character [a] makes way through location [b] at time [t]\nfight_way_out_of(a, b, t): character [a] fights way out of location [b] at time [t]\nescape_into(a, b, t): character [a] escapes into location [b] at time [t]\nneed_to_get_to(a, b, t): character [a] needs to get to location [b] at time [t]\n",
    "pseudo_predefinitions": "None\nforall(a b t). feel_surge_of(a, b, t) -> have_determination(a, b, t)\nforall(a b t). fight_way_out_of(a, b, t) -> escape_into(a, b, t)\nforall(a b t). make_way_through(a, b, t) -> move(a, t)",
    "formula": "Scope:\nForAll([a, b, t],\n       Implies(feel_surge_of(a, b, t),\n               have_determination(a, b, t)))\nForAll([a, b, t],\n       Implies(fight_way_out_of(a, b, t),\n               escape_into(a, b, t)))\nForAll([a, b, t],\n       Implies(make_way_through(a, b, t), move(a, t)))\nfeel_surge_of(sam, adrenaline, T15)\nfeel_surge_of(mia, adrenaline, T15)\ncharge_forward(sam, T15)\ncharge_forward(mia, T15)\ndodge(sam, punch, T15)\ndodge(mia, punch, T15)\nthrow(sam, punch, T15)\nthrow(mia, punch, T15)\nis_chaotic(fight, T15)\nfight_way_out_of(sam, group, T15)\nfight_way_out_of(mia, group, T15)\nescape_into(sam, night, T15)\nescape_into(mia, night, T15)\nScope:\nneed_to_get_to(sam, hideout, T16)\nneed_to_get_to(mia, hideout, T16)\n",
    "result": 0
  },
  {
    "full_conversation": "Detective Sam Carter entered the dimly lit room. \"What a mess!\", he muttered, surveying the scattered papers and overturned furniture. The victim, a local journalist, lay sprawled on the floor, a pen still clutched in his hand.\n(User: Sam knelt beside the body, examining the scene. \"Looks like he was onto something big. But what?\" He noticed a torn piece of paper sticking out from under the desk.)\nCarefully, he pulled it free. It was a fragment of a map, marked with an 'X' in red ink. \"This could be the key to solving this case,\" he thought.\n(User: Sam stood up, pocketing the map. \"I need to find out where this leads. But first, I should check the victim's contacts. Maybe someone knows what he was working on.\")\nHe made his way to the victim's office, where a cluttered desk held a computer and a stack of files. As he booted up the computer, a message popped up on the screen: \"If you find this, I\u2019m in trouble. Meet me at the old warehouse by the docks.\"\n(User: Sam's heart raced. \"Looks like I\u2019m not the only one looking for answers. I need to get to that warehouse before it\u2019s too late.\")\nHe grabbed his coat and headed out, the rain pouring down as he made his way to the docks. The old warehouse loomed ahead, its windows dark and foreboding.\n(User: Sam approached cautiously, scanning the area for any signs of life. \"This place gives me the creeps,\" he muttered, pushing the door open.)\nInside, the air was thick with dust and the smell of saltwater. Shadows danced in the corners as he stepped further in. Suddenly, a figure emerged from the darkness. \"You\u2019re late,\" the figure said, voice low and gravelly.\n(User: Sam squinted, trying to make out the face. \"Who are you? And what do you know about the journalist?\")\nThe figure stepped into the light, revealing a familiar face. It was Mia, a former colleague of the journalist. \"I know he was onto something big, and now they\u2019re after me too,\" she said, glancing nervously around the warehouse.\n(User: Sam felt a surge of adrenaline. \"We need to get out of here. But first, tell me everything you know about the map and what he was investigating.)\"\nMia took a deep breath, her eyes darting to the shadows. \"He was investigating a smuggling ring operating out of the docks. The map leads to their hideout. If we can get there first, we might find the evidence we need to take them down.\"\n(User: Sam nodded, determination in his eyes. \"Let\u2019s move. We don\u2019t have much time before they realize we\u2019re onto them.\")\nThey made their way through the maze of crates and barrels, the sound of footsteps echoing in the distance. Just as they reached the exit, a group of men in masks appeared, blocking their path.\n(User: Sam cursed under his breath. \"Looks like we\u2019re not the only ones interested in that map. We need to fight our way out of here!\")\nWith adrenaline pumping, Sam and Mia charged forward, dodging punches and throwing their own. The fight was chaotic, but they managed to push through the group and escape into the night.\n(User: Breathing heavily, Sam glanced at Mia. \"We need to get to that hideout before they regroup. Let\u2019s go!\")",
    "full_formulas": "defaultdict(<class 'list'>, {'global': [enter_location(sam_carter, room, T1), is_mess(room, T1), lay_on(journalist, floor, T1), clutch_item(journalist, pen, T1), notice_item(sam_carter, piece_of_paper, T2), stick_out_from(piece_of_paper, desk, T2), T0 < T1, T1 < T2]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, t],\n       Implies(pull_free(a, b, t),\n               Not(clutch_item(a, b, t)))), pull_free(sam, map_fragment, T3), is_fragment_of(map_fragment, map, T3), mark_with(map_fragment, x_mark, red_ink, T3), stand_up(sam, T4), pocket_item(sam, map_fragment, T4), need_to_find_out(sam, where_it_leads, T4), should_check(sam, victim_contacts, T4), Exists(someone, know_about(sam, victim_work, someone, T4)), T3 < T4], 'sam_thought': [is_key_to(map_fragment, case, T3)]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, t], Implies(is_on(a, b, t), is_in(a, b, t))), ForAll([a, b, c, t],\n       Implies(meet_at(a, b, c, t), need_to_get_to(a, c, t))), is_in(computer, office, T5), is_on(computer, desk, T5), is_on(stack_of_files, desk, T5), pop_up_on(message, computer, T5), meet_at(victim, unknown, warehouse, T5)], 'sam': [need_to_get_to(sam, warehouse, T6), look_for(sam, answers, T6)]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, t],\n       Implies(grab_item(a, b, t), notice_item(a, b, t))), ForAll([a, t],\n       Implies(head_out(a, t), enter_location(a, area, t))), ForAll([a, b, t],\n       Implies(make_way_to(a, b, t),\n               need_to_get_to(a, b, t))), grab_item(sam, coat, T7), head_out(sam, T7), pour_down(rain, T7), make_way_to(sam, docks, T7), loom_ahead(warehouse, sam, T7), is_dark(warehouse, T7), approach_cautiously(sam, T8), scan_location(sam, area, T8), push_open(sam, door, T8)], 'sam': [give_feeling(warehouse, creeps, sam, T8)]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, c, t],\n       Implies(is_thick_with(a, b, c, t),\n               And(is_in(b, a, t), is_in(c, a, t)))), ForAll([a, b, t], smell_of(a, b, t)), ForAll([a, b, t],\n       Implies(emerge_from(a, b, t), is_in(a, b, t))), is_thick_with(air, dust, smell, T9), smell_of(smell, saltwater, T9), dance_in(shadows, corner, T9), emerge_from(figure, darkness, T9), say_something(figure, statement, T9), is_low(voice, T9), is_gravelly(voice, T9), squint(sam, T10), try_to_make_out(sam, figure, T10), know_about(figure, sam, journalist, T10)]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, c, t],\n       Implies(is_former(a, b, c, t), is_former(a, b, c, t))), ForAll([a, b, t],\n       Implies(tell_me(a, sam, b, t), know_about(a, b, t))), ForAll([a, b, t],\n       Implies(investigate(a, b, t),\n               need_to_do(a,\n                          If(investigate(a, b, t), 1, 0),\n                          t))), step_into(mia, light, mia, T11), is_familiar_face(mia, sam), is_former(mia, colleague, journalist, T11), know_about(mia, journalist_investigation, T11), be_after(they, mia, T11), feel_surge_of(sam, adrenaline, T12), need_to_do(sam, get_out_of_here, T12), tell_me(sam, mia, everything, T12), investigate(journalist, map, T11)]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, t],\n       Implies(operate_out_of(a, b, t), is_in(a, b, t))), ForAll([a, b, t],\n       Implies(lead_to(a, b, t), need_to_get_to(a, b, t))), ForAll([a, b, t],\n       Implies(need_to_take_down(a, b, t),\n               be_after(a, b, t))), nod(sam, T14), have_determination(sam, determination, T14), move(sam, T14), have_time(sam, time, T14), realize(smuggling_ring,\n        If(is_onto(sam, smuggling_ring, T14), 1, 0),\n        T14), T13 < T14], 'mia': [investigate(journalist, smuggling_ring, T13), operate_out_of(smuggling_ring, docks, T13), lead_to(map, hideout, T13), can_find(mia, evidence, T13), need_to_take_down(mia, smuggling_ring, T13)]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, c, t],\n       Implies(consist_of(a, b, c, t),\n               And(is_in(b, a, t), is_in(c, a, t)))), ForAll([a, b, t],\n       Implies(reach_location(a, b, t),\n               enter_location(a, b, t))), make_way_through(sam, maze, T15), consist_of(maze, crates, barrels, T15), echo_in(footsteps, distance, T15), hear_sound(sam, footsteps, T15), reach_location(sam, exit, T15), appear_at(group, exit, T15), block_location(group, path, T15)], 'sam': [curse(sam, under_breath, T15), be_interested_in(group, map, T15), need_to_do(sam,\n           If(fight_way_out_of(sam, maze, T15), 1, 0),\n           T15)]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, t],\n       Implies(feel_surge_of(a, b, t),\n               have_determination(a, b, t))), ForAll([a, b, t],\n       Implies(fight_way_out_of(a, b, t),\n               escape_into(a, b, t))), ForAll([a, b, t],\n       Implies(make_way_through(a, b, t), move(a, t))), feel_surge_of(sam, adrenaline, T15), feel_surge_of(mia, adrenaline, T15), charge_forward(sam, T15), charge_forward(mia, T15), dodge(sam, punch, T15), dodge(mia, punch, T15), throw(sam, punch, T15), throw(mia, punch, T15), is_chaotic(fight, T15), fight_way_out_of(sam, group, T15), fight_way_out_of(mia, group, T15), escape_into(sam, night, T15), escape_into(mia, night, T15)], 'sam': [need_to_get_to(sam, hideout, T16), need_to_get_to(mia, hideout, T16)]})",
    "full_declarations": "Objects:\nsam_carter: Sam Carter, a detective\nroom: A dimly lit room\npapers: Scattered papers\nfurniture: Overturned furniture\njournalist: A local journalist, the victim\nfloor: The floor of the room\npen: A pen clutched in the victim's hand\ndesk: A cluttered desk, a piece of furniture\npiece_of_paper: A torn piece of paper\nmap_fragment: A fragment of a map\nx_mark: An 'X' marked on the map\nred_ink: Red ink used to mark the map\ncase: The case being investigated\nsam: Sam, a character\nthought: Sam's thought about the map\nwhere_it_leads: Where the map leads\nvictim_contacts: The victim's contacts\nvictim_work: What the victim was working on\nsomeone: Someone who knows the victim's work\noffice: The victim's office, a location\ncomputer: A computer on the desk, an item\nstack_of_files: A stack of files on the desk, an item\nmessage: A message on the computer screen, a piece of information\nwarehouse: An old warehouse by the docks, a location\ndocks: The docks, a location\nanswers: Answers to the case, a concept\ncoat: A coat, an item of clothing\nrain: Rain, a weather condition\narea: The area around Sam, a location\nsign_of_life: Signs of life, a concept\ndoor: The door of the warehouse, an item\ncreeps: The creeps, a feeling\nair: The air inside, a concept\ndust: Dust in the air, an item\nsmell: The smell of saltwater, a concept\nsaltwater: Saltwater, a type of water\nshadows: Shadows, a visual effect\ncorner: The corners of the room, a location\nfigure: A figure emerged from the darkness, a character\ndarkness: The darkness, a concept\nvoice: The figure's voice, a concept\nstatement: The figure's statement, a concept\nmia: Mia, a character\ncolleague: A colleague, a type of relationship\nadrenaline: Adrenaline, a physiological response\nmap: A map, an item\neverything: Everything Mia knows, a concept\nbreath: A deep breath taken by Mia, an action\neyes: Mia's eyes, a body part\nsmuggling_ring: A smuggling ring, an organization\nhideout: A hideout, a location\nevidence: Evidence needed to take down the smuggling ring, a concept\ndetermination: Determination in Sam's eyes, a concept\ntime: Time, a concept\nmaze: A maze, a location\ncrates: Crates, items\nbarrels: Barrels, items\nsound: The sound of footsteps, a concept\nfootsteps: Footsteps, a type of sound\ndistance: The distance, a concept\nexit: The exit, a location\ngroup: A group of men, a collection of characters\nmen: Men, characters\nmasks: Masks, items\npath: Their path, a concept\npunch: A punch, an action\nfight: A fight, an event\nnight: The night, a time\nRelations:\nenter_location(a, b, t): character [a] enters location [b] at time [t]\nis_mess(a, t): location [a] is a mess at time [t]\nlay_on(a, b, t): character [a] lays on location [b] at time [t]\nclutch_item(a, b, t): character [a] clutches item [b] at time [t]\nnotice_item(a, b, t): character [a] notices item [b] at time [t]\nstick_out_from(a, b, t): item [a] sticks out from location [b] at time [t]\npull_free(a, b, t): character [a] pulls item [b] free at time [t]\nis_fragment_of(a, b, t): item [a] is a fragment of item [b] at time [t]\nmark_with(a, b, c, t): item [a] is marked with [b] using [c] at time [t]\nis_key_to(a, b, t): item [a] is the key to [b] at time [t]\nhave_thought(a, b, t): character [a] has thought [b] at time [t]\nstand_up(a, t): character [a] stands up at time [t]\npocket_item(a, b, t): character [a] pockets item [b] at time [t]\nneed_to_find_out(a, b, t): character [a] needs to find out [b] at time [t]\nshould_check(a, b, t): character [a] should check [b] at time [t]\nknow_about(a, b, t): character [a] knows about [b] at time [t]\nis_in(a, b, t): item [a] is in location [b] at time [t]\nis_on(a, b, t): item [a] is on location [b] at time [t]\npop_up_on(a, b, t): item [a] pops up on item [b] at time [t]\nmeet_at(a, b, c, t): character [a] should meet character [b] at location [c] at time [t]\nneed_to_get_to(a, b, t): character [a] needs to get to location [b] at time [t]\nlook_for(a, b, t): character [a] is looking for [b] at time [t]\ngrab_item(a, b, t): character [a] grabs item [b] at time [t]\nhead_out(a, t): character [a] heads out at time [t]\npour_down(a, t): weather condition [a] pours down at time [t]\nmake_way_to(a, b, t): character [a] makes way to location [b] at time [t]\nloom_ahead(a, b, t): location [a] looms ahead of character [b] at time [t]\nis_dark(a, t): location [a] is dark at time [t]\napproach_cautiously(a, t): character [a] approaches cautiously at time [t]\nscan_location(a, b, t): character [a] scans location [b] at time [t]\nmutter(a, b, t): character [a] mutters [b] at time [t]\npush_open(a, b, t): character [a] pushes open item [b] at time [t]\ngive_feeling(a, b, c, t): location [a] gives feeling [b] to character [c] at time [t]\nis_thick_with(a, b, c, t): location [a] is thick with [b] and [c] at time [t]\nsmell_of(a, b, t): smell [a] is the smell of [b] at time [t]\ndance_in(a, b, t): shadows [a] dance in location [b] at time [t]\nemerge_from(a, b, t): character [a] emerges from location [b] at time [t]\nsay_something(a, b, t): character [a] says statement [b] at time [t]\nis_low(a, t): voice [a] is low at time [t]\nis_gravelly(a, t): voice [a] is gravelly at time [t]\nsquint(a, t): character [a] squint at time [t]\ntry_to_make_out(a, b, t): character [a] tries to make out [b] at time [t]\nstep_into(a, b, c, t): character [a] steps into [b] revealing [c] at time [t]\nis_familiar_face(a, b): [a] is the familiar face of [b]\nis_former(a, b, c, t): character [a] is a former [b] of [c] at time [t]\nbe_after(a, b, t): character [a] is after character [b] at time [t]\nglance_around(a, b, t): character [a] glances around location [b] at time [t]\nfeel_surge_of(a, b, t): character [a] feels a surge of [b] at time [t]\nneed_to_do(a, b, t): character [a] needs to do [b] at time [t]\ntell_me(a, b, c, t): character [a] tells character [b] about [c] at time [t]\ninvestigate(a, b, t): character [a] is investigating [b] at time [t]\ntake_breath(a, t): character [a] takes a breath at time [t]\ndart_to(a, b, t): body part [a] darts to location [b] at time [t]\noperate_out_of(a, b, t): organization [a] operates out of location [b] at time [t]\nlead_to(a, b, t): item [a] leads to location [b] at time [t]\ncan_find(a, b, t): character [a] can find [b] at time [t]\nneed_to_take_down(a, b, t): character [a] needs to take down [b] at time [t]\nnod(a, t): character [a] nods at time [t]\nhave_determination(a, b, t): character [a] has [b] at time [t]\nmove(a, t): character [a] moves at time [t]\nhave_time(a, b, t): character [a] has [b] at time [t]\nrealize(a, b, t): character [a] realizes [b] at time [t]\nis_onto(a, b, t): character [a] is onto character [b] at time [t]\nmake_way_through(a, b, t): character [a] makes way through location [b] at time [t]\nconsist_of(a, b, c, t): location [a] consists of items [b] and [c] at time [t]\nhear_sound(a, b, t): character [a] hears sound [b] at time [t]\necho_in(a, b, t): sound [a] echoes in location [b] at time [t]\nreach_location(a, b, t): character [a] reaches location [b] at time [t]\nappear_at(a, b, t): character [a] appears at location [b] at time [t]\nblock_location(a, b, t): character [a] blocks location [b] at time [t]\ncurse(a, b, t): character [a] curses [b] at time [t]\nbe_interested_in(a, b, t): character [a] is interested in item [b] at time [t]\nfight_way_out_of(a, b, t): character [a] fights way out of location [b] at time [t]\ncharge_forward(a, t): character [a] charges forward at time [t]\ndodge(a, b, t): character [a] dodges [b] at time [t]\nthrow(a, b, t): character [a] throws [b] at time [t]\nis_chaotic(a, t): event [a] is chaotic at time [t]\nescape_into(a, b, t): character [a] escapes into location [b] at time [t]\n",
    "full_timeline": "T0: The time before Detective Sam Carter entered the room.\nT1: The time when Detective Sam Carter entered the room and surveyed the scene.\nT2: The time when Sam knelt beside the body and examined the scene, noticing the torn piece of paper.\nT3: The time when Sam pulled out the fragment of map and thought about it being the key.\nT4: The time when Sam stood up, pocketed the map, and decided to check the victim's contacts.\nT5: The time when Sam made his way to the victim's office and booted up the computer.\nT6: The time when Sam saw the message on the computer and decided to go to the warehouse.\nT7: The time when Sam grabbed his coat and headed out to the docks in the rain.\nT8: The time when Sam approached the old warehouse cautiously and pushed the door open.\nT9: The time when Sam entered the warehouse, and a figure emerged from the darkness.\nT10: The time when Sam squinted and asked the figure about their identity and knowledge of the journalist.\nT11: The time when Mia stepped into the light and revealed that she knows about the journalist's investigation and that she is being targeted.\nT12: The time when Sam felt a surge of adrenaline and asked Mia to tell him everything she knows about the map and the investigation.\nT13: The time when Mia explained the journalist's investigation and the map's significance.\nT14: The time when Sam nodded and decided to move quickly to the hideout.\nT15: The time when Sam and Mia were ambushed by masked men while trying to leave the warehouse.\nT16: The time when Sam and Mia fought their way out of the warehouse and decided to head to the hideout.\n",
    "full_scopes": "sam_thought: Sam's thought about the map\nsam: Sam's dialogue\nmia: Mia's explanation\n"
  }
]