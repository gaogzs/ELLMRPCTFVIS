[
  {
    "conversation": "Detective Sam Carter entered the dimly lit room. \"What a mess!\", he muttered, surveying the scattered papers and overturned furniture. The victim, a local journalist, lay sprawled on the floor, a pen still clutched in his hand.\n(User: Sam knelt beside the body, examining the scene. \"Looks like he was onto something big. But what?\" He noticed a torn piece of paper sticking out from under the desk.)",
    "new_timeline": "[{'time_point_name': 'T0', 'time_point_description': 'The time before Detective Sam Carter entered the dimly lit room.'}, {'time_point_name': 'T1', 'time_point_description': 'The moment Detective Sam Carter entered the dimly lit room and found the body of the journalist.'}, {'time_point_name': 'T2', 'time_point_description': 'The time when Sam knelt beside the body and examined the scene, noticing the torn piece of paper.'}]",
    "new_declarations": "sam_carter: Detective Sam Carter, a character\nroom: A dimly lit room, a location\npapers: Scattered papers, items\nfurniture: Overturned furniture, items\nvictim: A local journalist, a character\nfloor: The floor, a location\npen: A pen, an item\nbody: The victim's body\ndesk: A desk, an item\npiece_of_paper: A torn piece of paper, an item\n\nenter_location(a, b, t): character [a] enters location [b] at time [t]\nis_in_location(a, b, t): object [a] is in location [b] at time [t]\nis_lying_on(a, b, t): character [a] is lying on [b] at time [t]\nhold_item(a, b, t): character [a] holds item [b] at time [t]\nstick_out_from(a, b, t): item [a] sticks out from [b] at time [t]\nexamine_object(a, b, t): character [a] examines object [b] at time [t]\n",
    "pseudo_predefinitions": "['is_in_location(a, [exclusive_arg], t)', 'forall(a b t). is_lying_on(a, b, t) -> exists(l). is_in_location(b, l, t) and is_in_location(a, l, t)']",
    "formula": "Scope:\nForAll([a, b1, b2, t],\n       Implies(And(is_in_location(a, b1, t),\n                   is_in_location(a, b2, t)),\n               b1 == b2))\nForAll([a, b, t],\n       Implies(is_lying_on(a, b, t),\n               Exists(l,\n                      And(is_in_location(b, l, t),\n                          is_in_location(a, l, t)))))\nenter_location(sam_carter, room, T0)\nis_in_location(papers, room, T0)\nis_in_location(furniture, room, T0)\nis_lying_on(victim, floor, T0)\nhold_item(victim, pen, T0)\nexamine_object(sam_carter, body, T1)\nstick_out_from(piece_of_paper, desk, T1)\n",
    "result": 0
  },
  {
    "conversation": "Carefully, he pulled it free. It was a fragment of a map, marked with an 'X' in red ink. \"This could be the key to solving this case,\" he thought.\n(User: Sam stood up, pocketing the map. \"I need to find out where this leads. But first, I should check the victim's contacts. Maybe someone knows what he was working on.\")",
    "new_timeline": "[{'time_point_name': 'T0', 'time_point_description': 'The time before Detective Sam Carter entered the dimly lit room.'}, {'time_point_name': 'T1', 'time_point_description': \"The moment Detective Sam Carter entered the dimly lit room and started surveying the scattered papers and overturned furniture, discovering the victim's body.\"}, {'time_point_name': 'T2', 'time_point_description': 'The time when Sam knelt beside the body, examining the scene and finding the torn piece of map.'}, {'time_point_name': 'T3', 'time_point_description': \"The time when Sam stood up, pocketing the map and deciding to check the victim's contacts.\"}]",
    "new_declarations": "fragment_of_map: A fragment of a map, an item\nx_mark: An 'X' mark on the map\nred_ink: Red ink, a substance\nkey: The key to solving the case, a concept\ncase: The case, an event\nsam: Sam, a character\nvictim_contacts: The victim's contacts, a concept\n\nis_fragment_of(a, b, t): item [a] is a fragment of [b] at time [t]\nmark_with(a, b, c, t): item [a] is marked with [b] in [c] at time [t]\nis_key_to(a, b, t): concept [a] is the key to [b] at time [t]\nthink(a, b, t): character [a] thinks [b] at time [t]\nstand_up(a, t): character [a] stands up at time [t]\npocket_item(a, b, t): character [a] pockets item [b] at time [t]\nneed_to_find_out(a, b, t): character [a] needs to find out [b] at time [t]\ncheck_contacts(a, b, t): character [a] checks [b] at time [t]\nknow_about(a, b, c, t): character [a] knows about [b] of [c] at time [t]\n",
    "pseudo_predefinitions": "['forall(a b t). is_fragment_of(a, b, t) -> is_in_location(a, b, t)', 'forall(a b c t). mark_with(a, b, c, t) -> is_in_location(a, a, t)', 'forall(a b t). is_key_to(a, b, t) -> think(sam, is_key_to(a, b, t), t)', 'forall(a b t). need_to_find_out(a, b, t) -> examine_object(a, b, t)']",
    "formula": "Scope:\nForAll([a, b, t],\n       Implies(is_fragment_of(a, b, t),\n               is_in_location(a, b, t)))\nForAll([a, b, c, t],\n       Implies(mark_with(a, b, c, t),\n               is_in_location(a, a, t)))\nForAll([a, b, t],\n       Implies(is_key_to(a, b, t),\n               think(sam, If(is_key_to(a, b, t), 1, 0), t)))\nForAll([a, b, t],\n       Implies(need_to_find_out(a, b, t),\n               examine_object(a, b, t)))\nis_fragment_of(fragment_of_map, map, T0)\nmark_with(fragment_of_map, x_mark, red_ink, T0)\nis_key_to(key, case, T0)\nstand_up(sam, T0)\npocket_item(sam, fragment_of_map, T0)\nneed_to_find_out(sam, fragment_of_map, T0)\ncheck_contacts(sam, victim_contacts, T0)\nExists(someone,\n       know_about(someone, case, victim_contacts, T0))\nScope:\nthink(sam,\n      If(is_key_to(fragment_of_map, case, T0), 1, 0),\n      T0)\n",
    "result": 5
  },
  {
    "conversation": "He made his way to the victim's office, where a cluttered desk held a computer and a stack of files. As he booted up the computer, a message popped up on the screen: \"If you find this, I\u2019m in trouble. Meet me at the old warehouse by the docks.\"\n(User: Sam's heart raced. \"Looks like I\u2019m not the only one looking for answers. I need to get to that warehouse before it\u2019s too late.\")",
    "new_timeline": "[{'time_point_name': 'T0', 'time_point_description': 'The time before Detective Sam Carter entered the dimly lit room.'}, {'time_point_name': 'T1', 'time_point_description': 'The time when Detective Sam Carter entered the dimly lit room and found the body.'}, {'time_point_name': 'T2', 'time_point_description': \"The time when Sam examined the scene, found the map fragment, and decided to check the victim's contacts.\"}, {'time_point_name': 'T3', 'time_point_description': \"The time when Sam arrived at the victim's office and found the message on the computer.\"}, {'time_point_name': 'T4', 'time_point_description': 'The time when Sam decided to go to the old warehouse by the docks.'}]",
    "new_declarations": "office: The victim's office, a location\ncluttered_desk: A cluttered desk, an item\ncomputer: A computer, an item\nstack_of_files: A stack of files, an item\nmessage: A message on the computer screen, an item\ntrouble: The trouble the victim is in, a concept\nold_warehouse: The old warehouse by the docks, a location\ndocks: The docks, a location\nsam_heart: Sam's heart\nanswers: Answers to the case, a concept\n\nis_located_in(a, b, t): object [a] is located in [b] at time [t]\nappear_on_screen(a, b, t): item [a] appears on the screen of [b] at time [t]\nis_in_state(a, b, t): character [a] is in state [b] at time [t]\nask_to_meet_at(a, b, c, t): character [a] asks to meet at [b] in [c] at time [t]\nrace(a, t): object [a] races at time [t]\nlook_for(a, b, t): character [a] looks for [b] at time [t]\nneed_to_go_to(a, b, t): character [a] needs to go to [b] at time [t]\nis_too_late(a, t): it is too late for character [a] at time [t]\n",
    "pseudo_predefinitions": "['is_located_in(a, [exclusive_arg], t)', 'forall(a b t). appear_on_screen(a, b, t) -> is_located_in(a, b, t)', 'forall(a b t). need_to_go_to(a, b, t) -> look_for(a, b, t)']",
    "formula": "Scope:\nForAll([a, b1, b2, t],\n       Implies(And(is_located_in(a, b1, t),\n                   is_located_in(a, b2, t)),\n               b1 == b2))\nForAll([a, b, t],\n       Implies(appear_on_screen(a, b, t),\n               is_located_in(a, b, t)))\nForAll([a, b, t],\n       Implies(need_to_go_to(a, b, t), look_for(a, b, t)))\nis_located_in(computer, office, T0)\nis_located_in(stack_of_files, office, T0)\nappear_on_screen(message, computer, T0)\nask_to_meet_at(victim, old_warehouse, trouble, T0)\nScope:\nlook_for(sam, answers, T1)\nneed_to_go_to(sam, old_warehouse, T1)\nis_too_late(sam, T1)\n",
    "result": 5
  },
  {
    "conversation": "He grabbed his coat and headed out, the rain pouring down as he made his way to the docks. The old warehouse loomed ahead, its windows dark and foreboding.\n(User: Sam approached cautiously, scanning the area for any signs of life. \"This place gives me the creeps,\" he muttered, pushing the door open.)",
    "new_timeline": "[{'time_point_name': 'T0', 'time_point_description': 'The time before Detective Sam Carter entered the dimly lit room.'}, {'time_point_name': 'T1', 'time_point_description': 'The time when Detective Sam Carter entered the dimly lit room and found the body of the journalist.'}, {'time_point_name': 'T2', 'time_point_description': \"The time when Sam examined the scene, found the map fragment, and checked the victim's office.\"}, {'time_point_name': 'T3', 'time_point_description': 'The time when Sam found the message on the computer and decided to go to the warehouse.'}, {'time_point_name': 'T4', 'time_point_description': 'The time when Sam grabbed his coat, headed out in the rain, and made his way to the docks and the old warehouse.'}, {'time_point_name': 'T5', 'time_point_description': 'The time when Sam approached the warehouse cautiously and pushed the door open.'}]",
    "new_declarations": "coat: A coat, an item of clothing\nrain: Rain, a weather condition\ndocks: The docks, a location\nold_warehouse: The old warehouse by the docks, a location\nwindows: Windows of the warehouse\nsam: Sam, a character\ndoor: The door of the warehouse\narea: The area around the warehouse\ncreeps: The creeps, a feeling of unease\nlife: Signs of life\n\ngrab_item(a, b, t): character [a] grabs item [b] at time [t]\nhead_to(a, b, t): character [a] heads to location [b] at time [t]\nis_pouring(a, t): weather condition [a] is pouring at time [t]\nloom_ahead(a, b, t): location [a] looms ahead of character [b] at time [t]\nis_dark(a, t): object [a] is dark at time [t]\nis_foreboding(a, t): location [a] is foreboding at time [t]\napproach_cautiously(a, t): character [a] approaches cautiously at time [t]\nscan_for(a, b, c, t): character [a] scans area [b] for [c] at time [t]\nmutter(a, b, t): character [a] mutters [b] at time [t]\npush_open(a, b, t): character [a] pushes open [b] at time [t]\ngive_feeling(a, b, c, t): location [a] gives character [b] feeling [c] at time [t]\n",
    "pseudo_predefinitions": "['forall(a b t). head_to(a, b, t) -> need_to_go_to(a, b, t)']",
    "formula": "Scope:\nForAll([a, b, t],\n       Implies(head_to(a, b, t), need_to_go_to(a, b, t)))\ngrab_item(sam, coat, T0)\nhead_to(sam, docks, T0)\nis_pouring(rain, T0)\nloom_ahead(old_warehouse, sam, T0)\nis_dark(windows, T0)\nis_foreboding(old_warehouse, T0)\napproach_cautiously(sam, T1)\nscan_for(sam, area, life, T1)\npush_open(sam, door, T1)\ngive_feeling(old_warehouse, sam, creeps, T1)\nScope:\nmutter(sam, creeps, T1)\n",
    "result": 5
  },
  {
    "conversation": "Inside, the air was thick with dust and the smell of saltwater. Shadows danced in the corners as he stepped further in. Suddenly, a figure emerged from the darkness. \"You\u2019re late,\" the figure said, voice low and gravelly.\n(User: Sam squinted, trying to make out the face. \"Who are you? And what do you know about the journalist?\")",
    "new_timeline": "[{'time_point_name': 'T0', 'time_point_description': 'The time before Sam Carter entered the dimly lit room.'}, {'time_point_name': 'T1', 'time_point_description': \"The time when Sam Carter entered the dimly lit room and found the journalist's body.\"}, {'time_point_name': 'T2', 'time_point_description': 'The time when Sam found the torn piece of map.'}, {'time_point_name': 'T3', 'time_point_description': \"The time when Sam found the message on the victim's computer.\"}, {'time_point_name': 'T4', 'time_point_description': 'The time when Sam headed out to the docks in the rain.'}, {'time_point_name': 'T5', 'time_point_description': 'The time when Sam approached the old warehouse.'}, {'time_point_name': 'T6', 'time_point_description': 'The time when Sam entered the warehouse and encountered a figure.'}]",
    "new_declarations": "air: The air inside, a concept\ndust: Dust in the air, an item\nsmell_of_saltwater: The smell of saltwater, a scent\nshadows: Shadows in the corners, a visual effect\nfigure: A figure emerged from the darkness, a character\ndarkness: The darkness, a state of low light\nvoice: The figure's voice\n\nis_thick_with(a, b, t): object [a] is thick with object [b] at time [t]\nhas_smell(a, b, t): object [a] has smell [b] at time [t]\ndance_in(a, b, t): object [a] dances in [b] at time [t]\nemerge_from(a, b, t): character [a] emerges from [b] at time [t]\nspeak(a, t): character [a] speaks at time [t]\nis_low(a, t): object [a] is low at time [t]\nis_gravelly(a, t): object [a] is gravelly at time [t]\ntry_to_make_out(a, b, t): character [a] tries to make out [b] at time [t]\nask_about(a, b, c, t): character [a] asks about [b] of [c] at time [t]\n",
    "pseudo_predefinitions": "['forall(a b t). is_thick_with(a, b, t) -> is_in_location(b, a, t)', 'forall(a b t). has_smell(a, b, t) -> is_in_location(b, a, t)', 'forall(a b t). emerge_from(a, b, t) -> is_in_location(a, b, t)', 'forall(a t). speak(a, t) -> exists(b). is_gravelly(b, t)', 'forall(a b c t). ask_about(a, b, c, t) -> need_to_find_out(a, b, t)']",
    "formula": "Scope:\nForAll([a, b, t],\n       Implies(is_thick_with(a, b, t),\n               is_in_location(b, a, t)))\nForAll([a, b, t],\n       Implies(has_smell(a, b, t), is_in_location(b, a, t)))\nForAll([a, b, t],\n       Implies(emerge_from(a, b, t),\n               is_in_location(a, b, t)))\nForAll([a, t],\n       Implies(speak(a, t), Exists(b, is_gravelly(b, t))))\nForAll([a, b, c, t],\n       Implies(ask_about(a, b, c, t),\n               need_to_find_out(a, b, t)))\nExists(t, is_thick_with(air, dust, t))\nExists(t, has_smell(air, smell_of_saltwater, t))\nExists(t, dance_in(shadows, corners, t))\nExists(t, emerge_from(figure, darkness, t))\nExists(t, speak(figure, t))\nExists(t, And(is_low(voice, t), is_gravelly(voice, t)))\nExists(t, try_to_make_out(sam, figure, t))\nExists(t, ask_about(sam, journalist, figure, t))\n",
    "result": 5
  },
  {
    "conversation": "The figure stepped into the light, revealing a familiar face. It was Mia, a former colleague of the journalist. \"I know he was onto something big, and now they\u2019re after me too,\" she said, glancing nervously around the warehouse.\n(User: Sam felt a surge of adrenaline. \"We need to get out of here. But first, tell me everything you know about the map and what he was investigating.)\"",
    "new_timeline": "[{'time_point_name': 'T0', 'time_point_description': 'The time before Detective Sam Carter entered the dimly lit room.'}, {'time_point_name': 'T1', 'time_point_description': 'The time when Detective Sam Carter entered the dimly lit room and found the body of the journalist.'}, {'time_point_name': 'T2', 'time_point_description': 'The time when Sam found the torn piece of map.'}, {'time_point_name': 'T3', 'time_point_description': \"The time when Sam found the message on the victim's computer.\"}, {'time_point_name': 'T4', 'time_point_description': 'The time when Sam was heading to the old warehouse by the docks in the rain.'}, {'time_point_name': 'T5', 'time_point_description': 'The time when Sam arrived at the old warehouse and met Mia.'}]",
    "new_declarations": "mia: Mia, a former colleague of the journalist\njournalist: The journalist, a character\nwarehouse: The warehouse, a location\nsomething_big: Something big, a concept\nmap: The map, an item\n\nis_colleague_of(a, b, t): character [a] is a colleague of character [b] at time [t]\nknow_about(a, b, t): character [a] knows about [b] at time [t]\nare_after(a, b, t): character [a] are after character [b] at time [t]\nglance_around(a, b, t): character [a] glances around location [b] at time [t]\nneed_to_get_out_of(a, b, t): character [a] needs to get out of location [b] at time [t]\nask_about(a, b, c, t): character [a] asks about [b] of [c] at time [t]\nreveal_face(a, t): character [a] reveals a familiar face at time [t]\nstep_into(a, b, t): character [a] steps into [b] at time [t]\n",
    "pseudo_predefinitions": "['forall(a b t). is_colleague_of(a, b, t) -> is_colleague_of(b, a, t)', 'forall(a b c t). ask_about(a, b, c, t) -> know_about(a, b, t)']",
    "formula": "Scope:\nForAll([a, b, t],\n       Implies(is_colleague_of(a, b, t),\n               is_colleague_of(b, a, t)))\nForAll([a, b, c, t],\n       Implies(ask_about(a, b, c, t), know_about(a, b, t)))\nExists(t, step_into(mia, warehouse, t))\nExists(t, reveal_face(mia, t))\nExists(t, is_colleague_of(mia, journalist, t))\nExists(t, know_about(mia, something_big, t))\nExists(t, are_after(they, mia, t))\nExists(t, glance_around(mia, warehouse, t))\nExists(t, ask_about(sam, map, mia, t))\nExists(t, ask_about(sam, journalist, mia, t))\nScope:\nExists(t, need_to_get_out_of(sam, warehouse, t))\n",
    "result": 5
  },
  {
    "conversation": "Mia took a deep breath, her eyes darting to the shadows. \"He was investigating a smuggling ring operating out of the docks. The map leads to their hideout. If we can get there first, we might find the evidence we need to take them down.\"\n(User: Sam nodded, determination in his eyes. \"Let\u2019s move. We don\u2019t have much time before they realize we\u2019re onto them.\")",
    "new_timeline": "[{'time_point_name': 'T0', 'time_point_description': 'The time before Detective Sam Carter entered the dimly lit room.'}, {'time_point_name': 'T1', 'time_point_description': 'The moment Detective Sam Carter entered the dimly lit room and surveyed the scene.'}, {'time_point_name': 'T2', 'time_point_description': 'The time Sam knelt beside the body, examining the scene and finding the torn piece of paper.'}, {'time_point_name': 'T3', 'time_point_description': \"The time Sam stood up and decided to check the victim's contacts.\"}, {'time_point_name': 'T4', 'time_point_description': \"The time Sam made his way to the victim's office and found the message on the computer.\"}, {'time_point_name': 'T5', 'time_point_description': 'The time Sam grabbed his coat and headed out to the docks in the rain.'}, {'time_point_name': 'T6', 'time_point_description': 'The time Sam approached the old warehouse cautiously.'}, {'time_point_name': 'T7', 'time_point_description': 'The time Sam entered the warehouse and met Mia.'}, {'time_point_name': 'T8', 'time_point_description': 'The time Mia explained the journalist was investigating a smuggling ring and the map leads to their hideout.'}, {'time_point_name': 'T9', 'time_point_description': 'The time Sam and Mia decided to move and find the evidence.'}]",
    "new_declarations": "mia: Mia, a character\nbreath: A deep breath\neyes: Mia's eyes\nsmuggling_ring: A smuggling ring\ndocks: The docks, a location\nhideout: The hideout, a location\nevidence: The evidence\nmap: The map, an item\nsam: Sam, a character\ndetermination: Determination in Sam's eyes\ntime: Time, a concept\n\ntake_breath(a, b, t): character [a] takes [b] at time [t]\ndart_to(a, b, t): object [a] darts to [b] at time [t]\ninvestigate(a, b, t): character [a] was investigating [b] at time [t]\noperate_out_of(a, b, t): object [a] operates out of [b] at time [t]\nlead_to(a, b, t): item [a] leads to [b] at time [t]\nfind_item(a, b, t): character [a] finds item [b] at time [t]\nneed_to_take_down(a, b, t): character [a] needs to take down [b] at time [t]\nnod(a, b, t): character [a] nods, showing [b] at time [t]\nmove(a, t): character [a] moves at time [t]\nhave_time(a, b, t): character [a] doesn't have much [b] at time [t]\nrealize(a, b, t): character [a] realizes [b] at time [t]\n",
    "pseudo_predefinitions": "['forall(a b t). investigate(a, b, t) -> know_about(a, b, t)', 'forall(a b t). lead_to(a, b, t) -> find_item(sam, b, t)', 'forall(a b t). need_to_take_down(a, b, t) -> investigate(sam, b, t)']",
    "formula": "Scope:\nForAll([a, b, t],\n       Implies(investigate(a, b, t), know_about(a, b, t)))\nForAll([a, b, t],\n       Implies(lead_to(a, b, t), find_item(sam, b, t)))\nForAll([a, b, t],\n       Implies(need_to_take_down(a, b, t),\n               investigate(sam, b, t)))\ntake_breath(mia, breath, T0)\ndart_to(eyes, shadows, T0)\ninvestigate(he, smuggling_ring, T0)\noperate_out_of(smuggling_ring, docks, T0)\nlead_to(map, hideout, T0)\nneed_to_take_down(mia, smuggling_ring, T0)\nnod(sam, determination, T1)\nhave_time(sam, time, T1)\nmove(sam, T1)\nScope:\nrealize(smuggling_ring, sam, T1)\n",
    "result": 5
  },
  {
    "full_conversation": "Detective Sam Carter entered the dimly lit room. \"What a mess!\", he muttered, surveying the scattered papers and overturned furniture. The victim, a local journalist, lay sprawled on the floor, a pen still clutched in his hand.\n(User: Sam knelt beside the body, examining the scene. \"Looks like he was onto something big. But what?\" He noticed a torn piece of paper sticking out from under the desk.)\nCarefully, he pulled it free. It was a fragment of a map, marked with an 'X' in red ink. \"This could be the key to solving this case,\" he thought.\n(User: Sam stood up, pocketing the map. \"I need to find out where this leads. But first, I should check the victim's contacts. Maybe someone knows what he was working on.\")\nHe made his way to the victim's office, where a cluttered desk held a computer and a stack of files. As he booted up the computer, a message popped up on the screen: \"If you find this, I\u2019m in trouble. Meet me at the old warehouse by the docks.\"\n(User: Sam's heart raced. \"Looks like I\u2019m not the only one looking for answers. I need to get to that warehouse before it\u2019s too late.\")\nHe grabbed his coat and headed out, the rain pouring down as he made his way to the docks. The old warehouse loomed ahead, its windows dark and foreboding.\n(User: Sam approached cautiously, scanning the area for any signs of life. \"This place gives me the creeps,\" he muttered, pushing the door open.)\nInside, the air was thick with dust and the smell of saltwater. Shadows danced in the corners as he stepped further in. Suddenly, a figure emerged from the darkness. \"You\u2019re late,\" the figure said, voice low and gravelly.\n(User: Sam squinted, trying to make out the face. \"Who are you? And what do you know about the journalist?\")\nThe figure stepped into the light, revealing a familiar face. It was Mia, a former colleague of the journalist. \"I know he was onto something big, and now they\u2019re after me too,\" she said, glancing nervously around the warehouse.\n(User: Sam felt a surge of adrenaline. \"We need to get out of here. But first, tell me everything you know about the map and what he was investigating.)\"\nMia took a deep breath, her eyes darting to the shadows. \"He was investigating a smuggling ring operating out of the docks. The map leads to their hideout. If we can get there first, we might find the evidence we need to take them down.\"\n(User: Sam nodded, determination in his eyes. \"Let\u2019s move. We don\u2019t have much time before they realize we\u2019re onto them.\")",
    "full_formulas": "defaultdict(<class 'list'>, {'global': [ForAll([a, b1, b2, t],\n       Implies(And(is_in_location(a, b1, t),\n                   is_in_location(a, b2, t)),\n               b1 == b2)), ForAll([a, b, t],\n       Implies(is_lying_on(a, b, t),\n               Exists(l,\n                      And(is_in_location(b, l, t),\n                          is_in_location(a, l, t))))), enter_location(sam_carter, room, T0), is_in_location(papers, room, T0), is_in_location(furniture, room, T0), is_lying_on(victim, floor, T0), hold_item(victim, pen, T0), examine_object(sam_carter, body, T1), stick_out_from(piece_of_paper, desk, T1)]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, t],\n       Implies(is_fragment_of(a, b, t),\n               is_in_location(a, b, t))), ForAll([a, b, c, t],\n       Implies(mark_with(a, b, c, t),\n               is_in_location(a, a, t))), ForAll([a, b, t],\n       Implies(is_key_to(a, b, t),\n               think(sam, If(is_key_to(a, b, t), 1, 0), t))), ForAll([a, b, t],\n       Implies(need_to_find_out(a, b, t),\n               examine_object(a, b, t))), is_fragment_of(fragment_of_map, map, T0), mark_with(fragment_of_map, x_mark, red_ink, T0), is_key_to(key, case, T0), stand_up(sam, T0), pocket_item(sam, fragment_of_map, T0), need_to_find_out(sam, fragment_of_map, T0), check_contacts(sam, victim_contacts, T0), Exists(someone,\n       know_about(someone, case, victim_contacts, T0))], 'sam_thought': [think(sam,\n      If(is_key_to(fragment_of_map, case, T0), 1, 0),\n      T0)]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b1, b2, t],\n       Implies(And(is_located_in(a, b1, t),\n                   is_located_in(a, b2, t)),\n               b1 == b2)), ForAll([a, b, t],\n       Implies(appear_on_screen(a, b, t),\n               is_located_in(a, b, t))), ForAll([a, b, t],\n       Implies(need_to_go_to(a, b, t), look_for(a, b, t))), is_located_in(computer, office, T0), is_located_in(stack_of_files, office, T0), appear_on_screen(message, computer, T0), ask_to_meet_at(victim, old_warehouse, trouble, T0)], 'sam_thought': [look_for(sam, answers, T1), need_to_go_to(sam, old_warehouse, T1), is_too_late(sam, T1)]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, t],\n       Implies(head_to(a, b, t), need_to_go_to(a, b, t))), grab_item(sam, coat, T0), head_to(sam, docks, T0), is_pouring(rain, T0), loom_ahead(old_warehouse, sam, T0), is_dark(windows, T0), is_foreboding(old_warehouse, T0), approach_cautiously(sam, T1), scan_for(sam, area, life, T1), push_open(sam, door, T1), give_feeling(old_warehouse, sam, creeps, T1)], 'sam_thought': [mutter(sam, creeps, T1)]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, t],\n       Implies(is_thick_with(a, b, t),\n               is_in_location(b, a, t))), ForAll([a, b, t],\n       Implies(has_smell(a, b, t), is_in_location(b, a, t))), ForAll([a, b, t],\n       Implies(emerge_from(a, b, t),\n               is_in_location(a, b, t))), ForAll([a, t],\n       Implies(speak(a, t), Exists(b, is_gravelly(b, t)))), ForAll([a, b, c, t],\n       Implies(ask_about(a, b, c, t),\n               need_to_find_out(a, b, t))), Exists(t, is_thick_with(air, dust, t)), Exists(t, has_smell(air, smell_of_saltwater, t)), Exists(t, dance_in(shadows, corners, t)), Exists(t, emerge_from(figure, darkness, t)), Exists(t, speak(figure, t)), Exists(t, And(is_low(voice, t), is_gravelly(voice, t))), Exists(t, try_to_make_out(sam, figure, t)), Exists(t, ask_about(sam, journalist, figure, t))]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, t],\n       Implies(is_colleague_of(a, b, t),\n               is_colleague_of(b, a, t))), ForAll([a, b, c, t],\n       Implies(ask_about(a, b, c, t), know_about(a, b, t))), Exists(t, step_into(mia, warehouse, t)), Exists(t, reveal_face(mia, t)), Exists(t, is_colleague_of(mia, journalist, t)), Exists(t, know_about(mia, something_big, t)), Exists(t, are_after(they, mia, t)), Exists(t, glance_around(mia, warehouse, t)), Exists(t, ask_about(sam, map, mia, t)), Exists(t, ask_about(sam, journalist, mia, t))], 'sam_thought': [Exists(t, need_to_get_out_of(sam, warehouse, t))]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, t],\n       Implies(investigate(a, b, t), know_about(a, b, t))), ForAll([a, b, t],\n       Implies(lead_to(a, b, t), find_item(sam, b, t))), ForAll([a, b, t],\n       Implies(need_to_take_down(a, b, t),\n               investigate(sam, b, t))), take_breath(mia, breath, T0), dart_to(eyes, shadows, T0), investigate(he, smuggling_ring, T0), operate_out_of(smuggling_ring, docks, T0), lead_to(map, hideout, T0), need_to_take_down(mia, smuggling_ring, T0), nod(sam, determination, T1), have_time(sam, time, T1), move(sam, T1)], 'sam_thought': [realize(smuggling_ring, sam, T1)]})",
    "full_declarations": "Objects:\nsam_carter: Detective Sam Carter, a character\nroom: A dimly lit room, a location\npapers: Scattered papers, items\nfurniture: Overturned furniture, items\nvictim: A local journalist, a character\nfloor: The floor, a location\npen: A pen, an item\nbody: The victim's body\ndesk: A desk, an item\npiece_of_paper: A torn piece of paper, an item\nfragment_of_map: A fragment of a map, an item\nx_mark: An 'X' mark on the map\nred_ink: Red ink, a substance\nkey: The key to solving the case, a concept\ncase: The case, an event\nsam: Sam, a character\nvictim_contacts: The victim's contacts, a concept\noffice: The victim's office, a location\ncluttered_desk: A cluttered desk, an item\ncomputer: A computer, an item\nstack_of_files: A stack of files, an item\nmessage: A message on the computer screen, an item\ntrouble: The trouble the victim is in, a concept\nold_warehouse: The old warehouse by the docks, a location\ndocks: The docks, a location\nsam_heart: Sam's heart\nanswers: Answers to the case, a concept\ncoat: A coat, an item of clothing\nrain: Rain, a weather condition\nwindows: Windows of the warehouse\ndoor: The door of the warehouse\narea: The area around the warehouse\ncreeps: The creeps, a feeling of unease\nlife: Signs of life\nair: The air inside, a concept\ndust: Dust in the air, an item\nsmell_of_saltwater: The smell of saltwater, a scent\nshadows: Shadows in the corners, a visual effect\nfigure: A figure emerged from the darkness, a character\ndarkness: The darkness, a state of low light\nvoice: The figure's voice\nmia: Mia, a character\njournalist: The journalist, a character\nwarehouse: The warehouse, a location\nsomething_big: Something big, a concept\nmap: The map, an item\nbreath: A deep breath\neyes: Mia's eyes\nsmuggling_ring: A smuggling ring\nhideout: The hideout, a location\nevidence: The evidence\ndetermination: Determination in Sam's eyes\ntime: Time, a concept\nRelations:\nenter_location(a, b, t): character [a] enters location [b] at time [t]\nis_in_location(a, b, t): object [a] is in location [b] at time [t]\nis_lying_on(a, b, t): character [a] is lying on [b] at time [t]\nhold_item(a, b, t): character [a] holds item [b] at time [t]\nstick_out_from(a, b, t): item [a] sticks out from [b] at time [t]\nexamine_object(a, b, t): character [a] examines object [b] at time [t]\nis_fragment_of(a, b, t): item [a] is a fragment of [b] at time [t]\nmark_with(a, b, c, t): item [a] is marked with [b] in [c] at time [t]\nis_key_to(a, b, t): concept [a] is the key to [b] at time [t]\nthink(a, b, t): character [a] thinks [b] at time [t]\nstand_up(a, t): character [a] stands up at time [t]\npocket_item(a, b, t): character [a] pockets item [b] at time [t]\nneed_to_find_out(a, b, t): character [a] needs to find out [b] at time [t]\ncheck_contacts(a, b, t): character [a] checks [b] at time [t]\nknow_about(a, b, t): character [a] knows about [b] at time [t]\nis_located_in(a, b, t): object [a] is located in [b] at time [t]\nappear_on_screen(a, b, t): item [a] appears on the screen of [b] at time [t]\nis_in_state(a, b, t): character [a] is in state [b] at time [t]\nask_to_meet_at(a, b, c, t): character [a] asks to meet at [b] in [c] at time [t]\nrace(a, t): object [a] races at time [t]\nlook_for(a, b, t): character [a] looks for [b] at time [t]\nneed_to_go_to(a, b, t): character [a] needs to go to [b] at time [t]\nis_too_late(a, t): it is too late for character [a] at time [t]\ngrab_item(a, b, t): character [a] grabs item [b] at time [t]\nhead_to(a, b, t): character [a] heads to location [b] at time [t]\nis_pouring(a, t): weather condition [a] is pouring at time [t]\nloom_ahead(a, b, t): location [a] looms ahead of character [b] at time [t]\nis_dark(a, t): object [a] is dark at time [t]\nis_foreboding(a, t): location [a] is foreboding at time [t]\napproach_cautiously(a, t): character [a] approaches cautiously at time [t]\nscan_for(a, b, c, t): character [a] scans area [b] for [c] at time [t]\nmutter(a, b, t): character [a] mutters [b] at time [t]\npush_open(a, b, t): character [a] pushes open [b] at time [t]\ngive_feeling(a, b, c, t): location [a] gives character [b] feeling [c] at time [t]\nis_thick_with(a, b, t): object [a] is thick with object [b] at time [t]\nhas_smell(a, b, t): object [a] has smell [b] at time [t]\ndance_in(a, b, t): object [a] dances in [b] at time [t]\nemerge_from(a, b, t): character [a] emerges from [b] at time [t]\nspeak(a, t): character [a] speaks at time [t]\nis_low(a, t): object [a] is low at time [t]\nis_gravelly(a, t): object [a] is gravelly at time [t]\ntry_to_make_out(a, b, t): character [a] tries to make out [b] at time [t]\nask_about(a, b, c, t): character [a] asks about [b] of [c] at time [t]\nis_colleague_of(a, b, t): character [a] is a colleague of character [b] at time [t]\nare_after(a, b, t): character [a] are after character [b] at time [t]\nglance_around(a, b, t): character [a] glances around location [b] at time [t]\nneed_to_get_out_of(a, b, t): character [a] needs to get out of location [b] at time [t]\nreveal_face(a, t): character [a] reveals a familiar face at time [t]\nstep_into(a, b, t): character [a] steps into [b] at time [t]\ntake_breath(a, b, t): character [a] takes [b] at time [t]\ndart_to(a, b, t): object [a] darts to [b] at time [t]\ninvestigate(a, b, t): character [a] was investigating [b] at time [t]\noperate_out_of(a, b, t): object [a] operates out of [b] at time [t]\nlead_to(a, b, t): item [a] leads to [b] at time [t]\nfind_item(a, b, t): character [a] finds item [b] at time [t]\nneed_to_take_down(a, b, t): character [a] needs to take down [b] at time [t]\nnod(a, b, t): character [a] nods, showing [b] at time [t]\nmove(a, t): character [a] moves at time [t]\nhave_time(a, b, t): character [a] doesn't have much [b] at time [t]\nrealize(a, b, t): character [a] realizes [b] at time [t]\n",
    "full_timeline": "",
    "full_scopes": "sam_thought: Sam's thoughts\n"
  }
]