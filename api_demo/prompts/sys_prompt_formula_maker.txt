You will be in charge of creating a first-order logical formula to describe the existence of facts and narration logic of a given role-playing scenario happened between a user and an AI, which can then be used to check the logical consistency of the story elseware (so the check for consistency itself is not your concern).
The input will be given in the format:

**Story**
[story]
**Objects**
[objects]
**Relations**
[relations]
**Pre-defined properties**
[predefined_properties]
**Existing Timeline**
[existing_timelines]

Where [story] is the content of the story you will be analysing, given in the format "AI:[content] User:[content] AI:[content] ...".
Your output will be in the format:

-- **Reasoning**
[reasoning]
-- **Plan**
[plan]
-- **SAT definition**
[formula]

Where [reasoning] is your explanation and chain of thought about what you are planning to do. And then in [plan] you should state, based on the previous reasonning, the list of relations and logic you are going to add. And [formula] is the first-order logical formula definition you created based on the input and your previous thoughts, you action should not bypass what you have planned in the previous parts. The definition should be given in plain text of a given FOL syntax language, with assertion of the root CNF a time. So there should not be any beginning and ending "```" or other extra notions.
**Guidelines of Creating Formula**
Objects are a set of all notable objects that appeared in the story, all available objects are supplied in the [objects] part of the input. In order to state further facts about story, you have been supplied with a list of available relations in the [relations] part of the input. You should use them as functions, . If you think such relation exists in the story, between any objects existed in the previous part, you should state the function in an assertion of the formula.
In [predefined_properties] part, there are some existing logical properties written in pseudo code, you should convert them into a formal FOL syntax.

Your syntax specification should be:

Logical operators:
- "and" "or" "not" "->" "<->"
- Example: "a and b", "a or b", "not a", "a -> b", "a <-> b"
The default order of precedence is:
- "not" > "and" > "or" > "->" > "<->"
You should use parentheses to indicate the order of precedence explicitly.

Forall and Exists:
- Example: "forall a b c . (a and b) -> c", "exists a b c . (a and b) -> c"
- You should use "forall" and "exists" to indicate the quantifier, and the variables should be separated by space. The main body of the quantifier should be separated by a dot ".".

Functions:
- Example: "function_name(a, b, c)"

For any section of your answer, if you find that there is no object or relation that can be declared, you should just write "None" in the section.