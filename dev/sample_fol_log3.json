[
  {
    "conversation": "[AI]: The year is 1777 Joseph is a citizen living in London. One day, he receives a mysterious letter from a stranger. The letter contains a riddle that leads him to a hidden treasure in the city. Joseph embarks on an adventure to solve the riddle and find the treasure, encountering various challenges and characters along the way. He learns about the history of London and uncovers secrets about his own family.\nUser: Joseph first decide to travel to Paris",
    "new_timeline": "T0: The time before Joseph receives the letter in London in 1777.\nT1: The time when Joseph receives the mysterious letter containing a riddle.\nT2: The time when Joseph decides to travel to Paris.\n",
    "new_declarations": "year_1777: The year 1777, a time\njoseph: Joseph, a named character\ncitizen: citizen, a type of person\nlondon: London, a named location\nletter: A mysterious letter\nstranger: A stranger, the sender of the letter\nriddle: A riddle contained in the letter\nhidden_treasure: A hidden treasure\nadventure: An adventure to solve the riddle and find the treasure\nhistory_of_london: The history of London\nfamily_secrets: Secrets about Joseph's family\nparis: Paris, a named location\n\nis_citizen(a, b, t): character [a] is a citizen for time [t]\nlive_in_location(a, b, t): character [a] lives in location [b] for time [t]\nreceive_letter_from(a, b, c, t): character [a] receives letter [b] from character [c] at time [t]\ncontains_riddle(a, b, t): letter [a] contains riddle [b] at time [t]\nleads_to(a, b, c, t): riddle [a] leads character [b] to [c] at time [t]\nembark_on(a, b, t): character [a] embarks on [b] at time [t]\nlearn_about(a, b, t): character [a] learns about [b] at time [t]\nuncover(a, b, t): character [a] uncovers [b] at time [t]\ntravel_to(a, b, t): character [a] travels to location [b] at time [t]\n",
    "pseudo_predefinitions": "['live_in_location(a, [exclusive_arg], t)', 'receive_letter_from(a, [exclusive_arg], c, t)', 'travel_to(a, [exclusive_arg], t)', 'forall(a b c t). leads_to(b, a, c, t) -> embark_on(a, b, t)']",
    "formula": "Scope: global\nForAll([a, b1, b2, t],\n       Implies(And(live_in_location(a, b1, t),\n                   live_in_location(a, b2, t)),\n               b1 == b2))\nForAll([a, b1, b2, c, t],\n       Implies(And(receive_letter_from(a, b1, c, t),\n                   receive_letter_from(a, b2, c, t)),\n               b1 == b2))\nForAll([a, b1, b2, t],\n       Implies(And(travel_to(a, b1, t), travel_to(a, b2, t)),\n               b1 == b2))\nForAll([a, b, c, t],\n       Implies(leads_to(b, a, c, t), embark_on(a, b, t)))\nis_citizen(joseph, citizen, year_1777)\nlive_in_location(joseph, london, year_1777)\nreceive_letter_from(joseph, letter, stranger, T1)\ncontains_riddle(letter, riddle, T1)\nleads_to(riddle, joseph, hidden_treasure, T1)\nembark_on(joseph, adventure, T1)\ntravel_to(joseph, paris, T2)\nT0 < T1\nT1 < T2\n",
    "unsat_formulas": []
  },
  {
    "conversation": "[AI]: Joseph decides to take a train from Berlin to Moscow. He is excited about the adventure ahead and can't wait to explore the beautiful city. He hopes to find clues related to the riddle in the letter.\nUser: Once he arrives in Paris, he plans to visit famous landmarks like the Eiffel Tower and the Louvre Museum.",
    "new_timeline": "T0: The time before Joseph receives the letter in London in 1777.\nT1: The time when Joseph receives the mysterious letter containing a riddle in London.\nT2: The time when Joseph decides to travel to Paris.\nT3: The time when Joseph decides to take a train from Berlin to Moscow.\nT4: The time when Joseph arrives in Paris and plans to visit famous landmarks.\n",
    "new_declarations": "joseph: Joseph, a named character\nberlin: Berlin, a named location\nmoscow: Moscow, a named location\nadventure: An adventure to solve the riddle and find the treasure\nriddle: A riddle contained in the letter\nletter: A mysterious letter\nparis: Paris, a named location\neiffel_tower: Eiffel Tower, a famous landmark\nlouvre_museum: Louvre Museum, a famous landmark\n\ntravel_to(a, b, t): character [a] travels to location [b] at time [t]\nembark_on(a, b, t): character [a] embarks on [b] at time [t]\nleads_to(a, b, c, t): riddle [a] leads character [b] to [c] at time [t]\nplans_to_visit(a, b, t): character [a] plans to visit location [b] at time [t]\n",
    "pseudo_predefinitions": "['travel_to(a, [exclusive_arg], t)', 'forall(a b c t). leads_to(a, b, c, t) -> plans_to_visit(b, c, t)']",
    "formula": "Scope: global\nForAll([a, b1, b2, t],\n       Implies(And(travel_to(a, b1, t), travel_to(a, b2, t)),\n               b1 == b2))\nForAll([a, b, c, t],\n       Implies(leads_to(a, b, c, t),\n               plans_to_visit(b, c, t)))\ntravel_to(joseph, moscow, T3)\nembark_on(joseph, adventure, T3)\nplans_to_visit(joseph, eiffel_tower, T4)\nplans_to_visit(joseph, louvre_museum, T4)\nT3 < T4\n",
    "unsat_formulas": []
  },
  {
    "conversation": "[AI]: Joseph arrives in Moscow and is immediately captivated by the city's beauty. He takes a moment to admire the Eiffel Tower before heading to the Louvre Museum. At the museum, he hopes to find clues related to the riddle in the letter. He spends hours exploring the exhibits, but he doesn't find anything that seems relevant.\nUser: Joseph decides to ask a local for help.",
    "new_timeline": "T0: The time before Joseph receives the letter in London in 1777.\nT1: The time when Joseph receives the mysterious letter containing a riddle in London.\nT2: The time when Joseph decides to travel to Paris.\nT3: The time when Joseph decides to take a train from Berlin to Moscow.\nT4: The time when Joseph arrives in Paris and plans to visit famous landmarks.\nT5: The time when Joseph arrives in Moscow and admires the Eiffel Tower before heading to the Louvre Museum.\nT6: The time Joseph spends exploring the exhibits in the Louvre Museum without finding any relevant clues.\nT7: The time when Joseph decides to ask a local for help.\n",
    "new_declarations": "joseph: Joseph, a named character\nmoscow: Moscow, a named location\neiffel_tower: Eiffel Tower, a famous landmark\nlouvre_museum: Louvre Museum, a famous landmark\nclues: Clues related to the riddle\nriddle: A riddle contained in the letter\nletter: A mysterious letter\nlocal: A local person\n\ntravel_to(a, b, t): character [a] travels to location [b] at time [t]\nadmire(a, b, t): character [a] admires location [b] at time [t]\nhead_to(a, b, t): character [a] heads to location [b] at time [t]\nsearch_for(a, b, c, t): character [a] searches for [b] in [c] at time [t]\nrelated_to(a, b, t): [a] is related to [b] at time [t]\nask_for_help(a, b, t): character [a] asks character [b] for help at time [t]\n",
    "pseudo_predefinitions": "['travel_to(a, [exclusive_arg], t)', 'head_to(a, [exclusive_arg], t)', 'plans_to_visit(a, [exclusive_arg], t)', 'forall(a b t). travel_to(a, b, t) -> head_to(a, b, t)', 'forall(a b c t). search_for(a, b, c, t) -> related_to(b, c, t)', 'forall(a b t). admire(a, b, t) -> related_to(b, a, t)']",
    "formula": "Scope: global\nForAll([a, b1, b2, t],\n       Implies(And(travel_to(a, b1, t), travel_to(a, b2, t)),\n               b1 == b2))\nForAll([a, b1, b2, t],\n       Implies(And(head_to(a, b1, t), head_to(a, b2, t)),\n               b1 == b2))\nForAll([a, b1, b2, t],\n       Implies(And(plans_to_visit(a, b1, t),\n                   plans_to_visit(a, b2, t)),\n               b1 == b2))\nForAll([a, b, t],\n       Implies(travel_to(a, b, t), head_to(a, b, t)))\nForAll([a, b, c, t],\n       Implies(search_for(a, b, c, t), related_to(b, c, t)))\nForAll([a, b, t],\n       Implies(admire(a, b, t), related_to(b, a, t)))\ntravel_to(joseph, moscow, T5)\nadmire(joseph, eiffel_tower, T5)\nhead_to(joseph, louvre_museum, T5)\nsearch_for(joseph, clues, louvre_museum, T6)\nrelated_to(clues, riddle, T6)\nrelated_to(riddle, letter, T6)\nask_for_help(joseph, local, T7)\nT0 < T1\nT1 < T2\nT2 < T3\nT3 < T4\nT4 < T5\nT5 < T6\nT6 < T7\n",
    "unsat_formulas": [
      "(plans_to_visit joseph eiffel_tower T4)",
      "(forall ((a Int) (b1 Int) (b2 Int) (t Int))\n  (=> (and (plans_to_visit a b1 t) (plans_to_visit a b2 t)) (= b1 b2)))",
      "(plans_to_visit joseph louvre_museum T4)"
    ]
  },
  {
    "conversation": "[AI]: Joseph approaches a friendly local named Marie. He explains his situation and shows her the letter with the riddle. Marie is intrigued and offers to help him solve it. Together, they brainstorm ideas and explore the city for clues.\nUser: They decide to visit Montmartre next, hoping to find something there.",
    "new_timeline": "T0: The time before Joseph receives the letter in London in 1777.\nT1: The time when Joseph receives the mysterious letter containing a riddle in London.\nT2: The time when Joseph decides to travel to Paris.\nT3: The time when Joseph decides to take a train from Berlin to Moscow.\nT4: The time when Joseph arrives in Paris and plans to visit famous landmarks.\nT5: The time when Joseph arrives in Moscow and admires the Eiffel Tower before heading to the Louvre Museum.\nT6: The time Joseph spends exploring the exhibits in the Louvre Museum without finding any relevant clues.\nT7: The time when Joseph decides to ask a local for help.\nT8: The time when Joseph approaches Marie, explains his situation, and they brainstorm ideas and explore the city for clues.\nT9: The time when Joseph and Marie decide to visit Montmartre next.\n",
    "new_declarations": "joseph: Joseph, a named character\nmarie: Marie, a friendly local\nletter: A mysterious letter\nriddle: A riddle contained in the letter\nmontmartre: Montmartre, a location in Paris\n\napproach(a, b, t): character [a] approaches character [b] at time [t]\nis_friendly(a, t): character [a] is friendly at time [t]\nexplain_situation(a, b, t): character [a] explains his situation to character [b] at time [t]\nshow_letter(a, b, t): character [a] shows letter [b] at time [t]\ncontains_riddle(a, b, t): letter [a] contains riddle [b] at time [t]\nis_intrigued(a, t): character [a] is intrigued at time [t]\noffer_help(a, b, t): character [a] offers help to character [b] at time [t]\nbrainstorm_ideas(a, b, t): character [a] and character [b] brainstorm ideas at time [t]\nexplore_location(a, b, t): character [a] and character [b] explore location [b] at time [t]\nvisit_location(a, b, t): character [a] visits location [b] at time [t]\n",
    "pseudo_predefinitions": "['live_in_location(a, [exclusive_arg], t)', 'visit_location(a, [exclusive_arg], t)', 'forall(a b t). contains_riddle(a, b, t) -> related_to(a, b, t)', 'forall(a b t). approach(a, b, t) -> ask_for_help(a, b, t)', 'forall(a b t). explain_situation(a, b, t) -> ask_for_help(a, b, t)', 'forall(a b t). show_letter(a, b, t) -> related_to(a, letter, t)', 'forall(a b t). explore_location(a, b, t) -> visit_location(a, b, t)']",
    "formula": "Scope: global\nForAll([a, b1, b2, t],\n       Implies(And(live_in_location(a, b1, t),\n                   live_in_location(a, b2, t)),\n               b1 == b2))\nForAll([a, b1, b2, t],\n       Implies(And(visit_location(a, b1, t),\n                   visit_location(a, b2, t)),\n               b1 == b2))\nForAll([a, b, t],\n       Implies(contains_riddle(a, b, t),\n               related_to(a, b, t)))\nForAll([a, b, t],\n       Implies(approach(a, b, t), ask_for_help(a, b, t)))\nForAll([a, b, t],\n       Implies(explain_situation(a, b, t),\n               ask_for_help(a, b, t)))\nForAll([a, b, t],\n       Implies(show_letter(a, b, t),\n               related_to(a, letter, t)))\nForAll([a, b, t],\n       Implies(explore_location(a, b, t),\n               visit_location(a, b, t)))\napproach(joseph, marie, T8)\nis_friendly(marie, T8)\nexplain_situation(joseph, marie, T8)\nshow_letter(joseph, marie, T8)\ncontains_riddle(letter, riddle, T8)\nis_intrigued(marie, T8)\noffer_help(marie, joseph, T8)\nbrainstorm_ideas(joseph, marie, T8)\nexplore_location(joseph, paris, T8)\nexplore_location(marie, paris, T8)\nvisit_location(joseph, montmartre, T9)\nvisit_location(marie, montmartre, T9)\nT8 < T9\n",
    "unsat_formulas": [
      "(plans_to_visit joseph eiffel_tower T4)",
      "(forall ((a Int) (b1 Int) (b2 Int) (t Int))\n  (=> (and (plans_to_visit a b1 t) (plans_to_visit a b2 t)) (= b1 b2)))",
      "(plans_to_visit joseph louvre_museum T4)"
    ]
  },
  {
    "conversation": "[AI]: Joseph and Marie make their way to Vienna, a charming neighborhood known for its artistic history. As they stroll through the cobblestone streets, they come across a small art gallery. Inside, they find a painting that resembles the riddle's description. They believe it might be a clue.\nUser: Joseph and Marie decide to speak with the gallery owner about the painting.",
    "new_timeline": "T0: The time before Joseph receives the letter in London in 1777.\nT1: The time when Joseph receives the mysterious letter containing a riddle in London.\nT2: The time when Joseph decides to travel to Paris.\nT3: The time when Joseph decides to take a train from Berlin to Moscow.\nT4: The time when Joseph arrives in Paris and plans to visit famous landmarks.\nT5: The time when Joseph arrives in Moscow and admires the Eiffel Tower before heading to the Louvre Museum.\nT6: The time Joseph spends exploring the exhibits in the Louvre Museum without finding any relevant clues.\nT7: The time when Joseph decides to ask a local for help.\nT8: The time when Joseph approaches Marie, explains his situation, and they brainstorm ideas and explore the city for clues.\nT9: The time when Joseph and Marie decide to visit Montmartre next.\nT10: The time when Joseph and Marie make their way to Vienna and find a painting that resembles the riddle's description.\nT11: The time when Joseph and Marie decide to speak with the gallery owner about the painting.\n",
    "new_declarations": "joseph: Joseph, a named character\nmarie: Marie, a friendly local\nvienna: Vienna, a charming neighborhood\nart_gallery: A small art gallery\npainting: A painting that resembles the riddle's description\nriddle: A riddle contained in the letter\n\nhead_to(a, b, t): character [a] heads to location [b] at time [t]\nexplore_location(a, b, t): character [a] and character [b] explore location [b] at time [t]\nvisit_location(a, b, t): character [a] visits location [b] at time [t]\nrelated_to(a, b, t): [a] is related to [b] at time [t]\napproach(a, b, t): character [a] approaches character [b] at time [t]\nask_for_help(a, b, t): character [a] asks character [b] for help at time [t]\n",
    "pseudo_predefinitions": "['forall(a b t). head_to(a, b, t) -> travel_to(a, b, t)', 'forall(a b t). visit_location(a, b, t) -> travel_to(a, b, t)', 'forall(a b t). ask_for_help(a, b, t) -> explain_situation(a, b, t)']",
    "formula": "Scope: global\nForAll([a, b, t],\n       Implies(head_to(a, b, t), travel_to(a, b, t)))\nForAll([a, b, t],\n       Implies(visit_location(a, b, t), travel_to(a, b, t)))\nForAll([a, b, t],\n       Implies(ask_for_help(a, b, t),\n               explain_situation(a, b, t)))\nhead_to(joseph, vienna, T10)\nhead_to(marie, vienna, T10)\nexplore_location(joseph, vienna, T10)\nexplore_location(marie, vienna, T10)\nrelated_to(painting, riddle, T10)\napproach(joseph, art_gallery, T11)\napproach(marie, art_gallery, T11)\nT10 < T11\n",
    "unsat_formulas": [
      "(plans_to_visit joseph eiffel_tower T4)",
      "(forall ((a Int) (b1 Int) (b2 Int) (t Int))\n  (=> (and (plans_to_visit a b1 t) (plans_to_visit a b2 t)) (= b1 b2)))",
      "(plans_to_visit joseph louvre_museum T4)"
    ]
  },
  {
    "full_conversation": "[AI]: The year is 1777 Joseph is a citizen living in London. One day, he receives a mysterious letter from a stranger. The letter contains a riddle that leads him to a hidden treasure in the city. Joseph embarks on an adventure to solve the riddle and find the treasure, encountering various challenges and characters along the way. He learns about the history of London and uncovers secrets about his own family.\nUser: Joseph first decide to travel to Paris\n[AI]: Joseph decides to take a train from Berlin to Moscow. He is excited about the adventure ahead and can't wait to explore the beautiful city. He hopes to find clues related to the riddle in the letter.\nUser: Once he arrives in Paris, he plans to visit famous landmarks like the Eiffel Tower and the Louvre Museum.\n[AI]: Joseph arrives in Moscow and is immediately captivated by the city's beauty. He takes a moment to admire the Eiffel Tower before heading to the Louvre Museum. At the museum, he hopes to find clues related to the riddle in the letter. He spends hours exploring the exhibits, but he doesn't find anything that seems relevant.\nUser: Joseph decides to ask a local for help.\n[AI]: Joseph approaches a friendly local named Marie. He explains his situation and shows her the letter with the riddle. Marie is intrigued and offers to help him solve it. Together, they brainstorm ideas and explore the city for clues.\nUser: They decide to visit Montmartre next, hoping to find something there.\n[AI]: Joseph and Marie make their way to Vienna, a charming neighborhood known for its artistic history. As they stroll through the cobblestone streets, they come across a small art gallery. Inside, they find a painting that resembles the riddle's description. They believe it might be a clue.\nUser: Joseph and Marie decide to speak with the gallery owner about the painting.",
    "full_formulas": "defaultdict(<class 'list'>, {'global': [ForAll([a, b1, b2, t],\n       Implies(And(live_in_location(a, b1, t),\n                   live_in_location(a, b2, t)),\n               b1 == b2)), ForAll([a, b1, b2, c, t],\n       Implies(And(receive_letter_from(a, b1, c, t),\n                   receive_letter_from(a, b2, c, t)),\n               b1 == b2)), ForAll([a, b1, b2, t],\n       Implies(And(travel_to(a, b1, t), travel_to(a, b2, t)),\n               b1 == b2)), ForAll([a, b, c, t],\n       Implies(leads_to(b, a, c, t), embark_on(a, b, t))), is_citizen(joseph, citizen, year_1777), live_in_location(joseph, london, year_1777), receive_letter_from(joseph, letter, stranger, T1), contains_riddle(letter, riddle, T1), leads_to(riddle, joseph, hidden_treasure, T1), embark_on(joseph, adventure, T1), travel_to(joseph, paris, T2), T0 < T1, T1 < T2]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b1, b2, t],\n       Implies(And(travel_to(a, b1, t), travel_to(a, b2, t)),\n               b1 == b2)), ForAll([a, b, c, t],\n       Implies(leads_to(a, b, c, t),\n               plans_to_visit(b, c, t))), travel_to(joseph, moscow, T3), embark_on(joseph, adventure, T3), plans_to_visit(joseph, eiffel_tower, T4), plans_to_visit(joseph, louvre_museum, T4), T3 < T4]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b1, b2, t],\n       Implies(And(travel_to(a, b1, t), travel_to(a, b2, t)),\n               b1 == b2)), ForAll([a, b1, b2, t],\n       Implies(And(head_to(a, b1, t), head_to(a, b2, t)),\n               b1 == b2)), ForAll([a, b1, b2, t],\n       Implies(And(plans_to_visit(a, b1, t),\n                   plans_to_visit(a, b2, t)),\n               b1 == b2)), ForAll([a, b, t],\n       Implies(travel_to(a, b, t), head_to(a, b, t))), ForAll([a, b, c, t],\n       Implies(search_for(a, b, c, t), related_to(b, c, t))), ForAll([a, b, t],\n       Implies(admire(a, b, t), related_to(b, a, t))), travel_to(joseph, moscow, T5), admire(joseph, eiffel_tower, T5), head_to(joseph, louvre_museum, T5), search_for(joseph, clues, louvre_museum, T6), related_to(clues, riddle, T6), related_to(riddle, letter, T6), ask_for_help(joseph, local, T7), T0 < T1, T1 < T2, T2 < T3, T3 < T4, T4 < T5, T5 < T6, T6 < T7]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b1, b2, t],\n       Implies(And(live_in_location(a, b1, t),\n                   live_in_location(a, b2, t)),\n               b1 == b2)), ForAll([a, b1, b2, t],\n       Implies(And(visit_location(a, b1, t),\n                   visit_location(a, b2, t)),\n               b1 == b2)), ForAll([a, b, t],\n       Implies(contains_riddle(a, b, t),\n               related_to(a, b, t))), ForAll([a, b, t],\n       Implies(approach(a, b, t), ask_for_help(a, b, t))), ForAll([a, b, t],\n       Implies(explain_situation(a, b, t),\n               ask_for_help(a, b, t))), ForAll([a, b, t],\n       Implies(show_letter(a, b, t),\n               related_to(a, letter, t))), ForAll([a, b, t],\n       Implies(explore_location(a, b, t),\n               visit_location(a, b, t))), approach(joseph, marie, T8), is_friendly(marie, T8), explain_situation(joseph, marie, T8), show_letter(joseph, marie, T8), contains_riddle(letter, riddle, T8), is_intrigued(marie, T8), offer_help(marie, joseph, T8), brainstorm_ideas(joseph, marie, T8), explore_location(joseph, paris, T8), explore_location(marie, paris, T8), visit_location(joseph, montmartre, T9), visit_location(marie, montmartre, T9), T8 < T9]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, t],\n       Implies(head_to(a, b, t), travel_to(a, b, t))), ForAll([a, b, t],\n       Implies(visit_location(a, b, t), travel_to(a, b, t))), ForAll([a, b, t],\n       Implies(ask_for_help(a, b, t),\n               explain_situation(a, b, t))), head_to(joseph, vienna, T10), head_to(marie, vienna, T10), explore_location(joseph, vienna, T10), explore_location(marie, vienna, T10), related_to(painting, riddle, T10), approach(joseph, art_gallery, T11), approach(marie, art_gallery, T11), T10 < T11]})",
    "full_declarations": "Objects:\nyear_1777: The year 1777, a time\njoseph: Joseph, a named character\ncitizen: citizen, a type of person\nlondon: London, a named location\nletter: A mysterious letter\nstranger: A stranger, the sender of the letter\nriddle: A riddle contained in the letter\nhidden_treasure: A hidden treasure\nadventure: An adventure to solve the riddle and find the treasure\nhistory_of_london: The history of London\nfamily_secrets: Secrets about Joseph's family\nparis: Paris, a named location\nberlin: Berlin, a named location\nmoscow: Moscow, a named location\neiffel_tower: Eiffel Tower, a famous landmark\nlouvre_museum: Louvre Museum, a famous landmark\nclues: Clues related to the riddle\nlocal: A local person\nmarie: Marie, a friendly local\nmontmartre: Montmartre, a location in Paris\nvienna: Vienna, a charming neighborhood\nart_gallery: A small art gallery\npainting: A painting that resembles the riddle's description\nRelations:\nis_citizen(a, b, t): character [a] is a citizen for time [t]\nlive_in_location(a, b, t): character [a] lives in location [b] for time [t]\nreceive_letter_from(a, b, c, t): character [a] receives letter [b] from character [c] at time [t]\ncontains_riddle(a, b, t): letter [a] contains riddle [b] at time [t]\nleads_to(a, b, c, t): riddle [a] leads character [b] to [c] at time [t]\nembark_on(a, b, t): character [a] embarks on [b] at time [t]\nlearn_about(a, b, t): character [a] learns about [b] at time [t]\nuncover(a, b, t): character [a] uncovers [b] at time [t]\ntravel_to(a, b, t): character [a] travels to location [b] at time [t]\nplans_to_visit(a, b, t): character [a] plans to visit location [b] at time [t]\nadmire(a, b, t): character [a] admires location [b] at time [t]\nhead_to(a, b, t): character [a] heads to location [b] at time [t]\nsearch_for(a, b, c, t): character [a] searches for [b] in [c] at time [t]\nrelated_to(a, b, t): [a] is related to [b] at time [t]\nask_for_help(a, b, t): character [a] asks character [b] for help at time [t]\napproach(a, b, t): character [a] approaches character [b] at time [t]\nis_friendly(a, t): character [a] is friendly at time [t]\nexplain_situation(a, b, t): character [a] explains his situation to character [b] at time [t]\nshow_letter(a, b, t): character [a] shows letter [b] at time [t]\nis_intrigued(a, t): character [a] is intrigued at time [t]\noffer_help(a, b, t): character [a] offers help to character [b] at time [t]\nbrainstorm_ideas(a, b, t): character [a] and character [b] brainstorm ideas at time [t]\nexplore_location(a, b, t): character [a] and character [b] explore location [b] at time [t]\nvisit_location(a, b, t): character [a] visits location [b] at time [t]\n",
    "full_timeline": "T0: The time before Joseph receives the letter in London in 1777.\nT1: The time when Joseph receives the mysterious letter containing a riddle in London.\nT2: The time when Joseph decides to travel to Paris.\nT3: The time when Joseph decides to take a train from Berlin to Moscow.\nT4: The time when Joseph arrives in Paris and plans to visit famous landmarks.\nT5: The time when Joseph arrives in Moscow and admires the Eiffel Tower before heading to the Louvre Museum.\nT6: The time Joseph spends exploring the exhibits in the Louvre Museum without finding any relevant clues.\nT7: The time when Joseph decides to ask a local for help.\nT8: The time when Joseph approaches Marie, explains his situation, and they brainstorm ideas and explore the city for clues.\nT9: The time when Joseph and Marie decide to visit Montmartre next.\nT10: The time when Joseph and Marie make their way to Vienna and find a painting that resembles the riddle's description.\nT11: The time when Joseph and Marie decide to speak with the gallery owner about the painting.\n",
    "full_scopes": ""
  }
]