[
  {
    "conversation": "AI: Maridan is a young sergeant serving in the king's knightly order. He is known for his bravery and loyalty. One day, he receives a secret mission from the king to investigate a series of mysterious disappearances in the kingdom. Maridan sets out on his quest, determined to uncover the truth and protect his people.\n(User: Maridan first decides to gather information from the villagers.)",
    "new_timeline": "T0: The time before Maridan receives the secret mission from the king.\nT1: The time when Maridan receives the secret mission and sets out on his quest.\nT2: The time when Maridan decides to gather information from the villagers.\n",
    "new_declarations": "maridan: Maridan, a named character\nsergeant: sergeant, a military rank\nking: king, a character\nknightly_order: knightly order, a group\nmission: mission, a task\ndisappearances: disappearances, an event\nkingdom: kingdom, a location\nvillagers: villagers, a group of people\n\nis_a(a, b, t): character [a] is a [b] for time [t]\nserve_in(a, b, t): character [a] serves in [b] for time [t]\nreceive_mission_from(a, b, c, t): character [a] receives [b] from [c] for time [t]\ninvestigate(a, b, t): character [a] investigates [b] for time [t]\noccur_in(a, b, t): event [a] occurs in [b] for time [t]\ngather_information_from(a, b, t): character [a] gathers information from [b] for time [t]\n",
    "pseudo_predefinitions": "[]",
    "formula": "Scope: global\nis_a(maridan, sergeant, T1)\nserve_in(maridan, knightly_order, T1)\nreceive_mission_from(maridan, mission, king, T1)\noccur_in(disappearances, kingdom, T1)\ninvestigate(maridan, disappearances, T1)\ngather_information_from(maridan, villagers, T2)\nT0 < T1\nT1 < T2\n",
    "unsat_formulas": []
  },
  {
    "conversation": "AI: Maridan visits the nearby village and speaks with the villagers. They tell him about strange noises coming from the forest at night and sightings of shadowy figures. Maridan takes note of their accounts and decides to investigate the forest next.\n(User: He plans to enter the forest at dawn, hoping to find clues about the disappearances.)",
    "new_timeline": "T0: The time before Maridan receives the secret mission from the king.\nT1: The time when Maridan receives the secret mission and sets out on his quest.\nT2: The time when Maridan decides to gather information from the villagers and speaks with them.\nT3: The time when Maridan plans to enter the forest at dawn.\n",
    "new_declarations": "maridan: Maridan, a named character\nvillage: village, a location\nvillagers: villagers, a group of people\nnoises: noises, a type of sound\nforest: forest, a location\nnight: night, a time\nsightings: sightings, an event\nshadowy_figures: shadowy figures, a group of characters\naccounts: accounts, a type of information\ndawn: dawn, a time\nclues: clues, a type of information\ndisappearances: disappearances, an event\n\nvisits_location(a, b, t): character [a] visits location [b] for time [t]\nspeaks_with(a, b, t): character [a] speaks with [b] for time [t]\ngather_information_from(a, b, t): character [a] gathers information from [b] for time [t]\noccur_in(a, b, t): event [a] occurs in [b] for time [t]\noccur_at(a, b, t): event [a] occurs at [b] for time [t]\nare_of_type(a, b, t): object [a] is of type [b] for time [t]\ntakes_note_of(a, b, t): character [a] takes note of [b] for time [t]\ninvestigate(a, b, t): character [a] investigates [b] for time [t]\nenter_location_at(a, b, c, t): character [a] enters location [b] at time [c] for time [t]\nfinds_object(a, b, c, t): character [a] finds object [b] about [c] for time [t]\n",
    "pseudo_predefinitions": "['forall(a b t). visits_location(a, b, t) -> enter_location_at(a, b, t, t)', 'forall(a b t). are_of_type(a, noises, t) -> occur_in(a, b, t)', 'forall(a b t). investigate(a, b, t) -> gather_information_from(a, b, t)']",
    "formula": "Scope: global\nForAll([a, b, t],\n       Implies(visits_location(a, b, t),\n               enter_location_at(a, b, t, t)))\nForAll([a, b, t],\n       Implies(are_of_type(a, noises, t), occur_in(a, b, t)))\nForAll([a, b, t],\n       Implies(investigate(a, b, t),\n               gather_information_from(a, b, t)))\nvisits_location(maridan, village, T2)\nspeaks_with(maridan, villagers, T2)\ngather_information_from(maridan, villagers, T2)\noccur_in(noises, forest, night)\noccur_at(sightings, night, forest)\nare_of_type(noises, noises, night)\nare_of_type(sightings, sightings, night)\nare_of_type(shadowy_figures, shadowy_figures, night)\ntakes_note_of(maridan, accounts, T2)\ninvestigate(maridan, forest, T3)\nenter_location_at(maridan, forest, dawn, T3)\nT0 < T1\nT1 < T2\nT2 < T3\n",
    "unsat_formulas": []
  },
  {
    "conversation": "AI: At dawn, Maridan enters the forest, armed with his sword and shield. The forest is dense and eerie, with sunlight barely penetrating through the thick canopy. As he ventures deeper, he hears rustling sounds and sees fleeting shadows. He remains cautious and alert, ready to confront any danger.\n(User: Maridan decides to follow the sounds, hoping they will lead him to the source of the mystery.)",
    "new_timeline": "T0: The time before Maridan receives the secret mission from the king.\nT1: The time when Maridan receives the secret mission and sets out on his quest.\nT2: The time when Maridan decides to gather information from the villagers and speaks with them.\nT3: The time when Maridan plans to enter the forest at dawn and the time before he enters the forest.\nT4: The time when Maridan enters the forest at dawn.\nT5: The time when Maridan decides to follow the sounds in the forest.\n",
    "new_declarations": "maridan: Maridan, a named character\ndawn: dawn, a time\nforest: forest, a location\nsword: sword, an item\nshield: shield, an item\nsunlight: sunlight, a type of light\ncanopy: canopy, a part of the forest\nrustling_sounds: rustling sounds, a type of sound\nshadows: shadows, a visual element\ndanger: danger, a concept\nsounds: sounds, a type of sound\nmystery: mystery, a concept\n\nenter_location_at(a, b, c, t): character [a] enters location [b] at time [c] for time [t]\nis_armed_with(a, b, t): character [a] is armed with item [b] for time [t]\nis_dense(a, t): location [a] is dense for time [t]\nis_eerie(a, t): location [a] is eerie for time [t]\npenetrate_location(a, b, t): object [a] penetrates location [b] for time [t]\nhears_sound(a, b, t): character [a] hears sound [b] for time [t]\nsees_object(a, b, t): character [a] sees object [b] for time [t]\nis_cautious(a, t): character [a] is cautious for time [t]\nis_alert(a, t): character [a] is alert for time [t]\nconfronts_object(a, b, t): character [a] confronts object [b] for time [t]\nfollow_object(a, b, t): character [a] follows object [b] for time [t]\nlead_to(a, b, t): object [a] leads to object [b] for time [t]\n",
    "pseudo_predefinitions": "['forall(a b c t). enter_location_at(a, b, c, t) -> visits_location(a, b, t)']",
    "formula": "Scope: global\nForAll([a, b, c, t],\n       Implies(enter_location_at(a, b, c, t),\n               visits_location(a, b, t)))\nenter_location_at(maridan, forest, dawn, T4)\nis_armed_with(maridan, sword, T4)\nis_armed_with(maridan, shield, T4)\nis_dense(forest, T4)\nis_eerie(forest, T4)\nNot(penetrate_location(sunlight, canopy, T4))\nhears_sound(maridan, rustling_sounds, T4)\nsees_object(maridan, shadows, T4)\nis_cautious(maridan, T4)\nis_alert(maridan, T4)\nfollow_object(maridan, sounds, T5)\nlead_to(sounds, mystery, T5)\nT3 < T4\nT4 < T5\n",
    "unsat_formulas": []
  },
  {
    "conversation": "AI: Maridan follows the sounds cautiously, moving through the underbrush. He comes across a clearing where he sees a group of hooded figures performing a ritual. They seem to be summoning something dark and sinister. Maridan realizes that these figures are behind the disappearances and decides to confront them.\n(User: He prepares to fight the hooded figures, ready to protect the kingdom.)",
    "new_timeline": "T0: The time before Maridan receives the secret mission from the king.\nT1: The time when Maridan receives the secret mission and sets out on his quest.\nT2: The time when Maridan decides to gather information from the villagers and speaks with them.\nT3: The time when Maridan plans to enter the forest at dawn and the time before he enters the forest.\nT4: The time when Maridan enters the forest at dawn.\nT5: The time when Maridan decides to follow the sounds in the forest.\nT6: The time when Maridan follows the sounds and discovers the hooded figures performing a ritual.\nT7: The time when Maridan prepares to fight the hooded figures.\n",
    "new_declarations": "maridan: Maridan, a named character\nsounds: sounds, a type of sound\nunderbrush: underbrush, a part of the forest\nclearing: clearing, a location\nhooded_figures: hooded figures, a group of characters\nritual: ritual, an event\nkingdom: kingdom, a location\ndisappearances: disappearances, an event\n\nfollow_object(a, b, t): character [a] follows object [b] for time [t]\nmove_through(a, b, t): character [a] moves through [b] for time [t]\ncomes_across(a, b, t): character [a] comes across [b] for time [t]\nsees_object(a, b, t): character [a] sees object [b] for time [t]\nperform_event(a, b, t): character [a] performs event [b] for time [t]\nsummon_object(a, b, t): character [a] summons object [b] for time [t]\nis_behind(a, b, t): object [a] is behind object [b] for time [t]\nconfronts_object(a, b, t): character [a] confronts object [b] for time [t]\nprotects_location(a, b, t): character [a] protects location [b] for time [t]\nprepares_to_fight(a, b, t): character [a] prepares to fight [b] for time [t]\n",
    "pseudo_predefinitions": "['forall(a b). confronts_object(a, b, t) -> prepares_to_fight(a, b, t)']",
    "formula": "Scope: global\nForAll([a, b],\n       Implies(confronts_object(a, b, t),\n               prepares_to_fight(a, b, t)))\nfollow_object(maridan, sounds, T6)\nmove_through(maridan, underbrush, T6)\ncomes_across(maridan, clearing, T6)\nsees_object(maridan, hooded_figures, T6)\nperform_event(hooded_figures, ritual, T6)\nis_behind(hooded_figures, disappearances, T6)\nconfronts_object(maridan, hooded_figures, T6)\nprepares_to_fight(maridan, hooded_figures, T7)\nprotects_location(maridan, kingdom, T7)\n",
    "unsat_formulas": []
  },
  {
    "conversation": "AI: As Maridan steps forward, the hooded figures suddenly disappeared, leaving behind a dark mist. Maridan feels a chill run down his spine but remains resolute. He searches the clearing for any clues and finds nothing, he had no choice but to return to the order and report his findings to the king. He vows to continue his investigation and protect the kingdom from any threats.\n(User: Maridan returns to the order and informs the king about the hooded figures and the dark ritual he witnessed.)",
    "new_timeline": "T0: The time before Maridan receives the secret mission from the king.\nT1: The time when Maridan receives the secret mission and sets out on his quest.\nT2: The time when Maridan decides to gather information from the villagers and speaks with them.\nT3: The time when Maridan plans to enter the forest at dawn and the time before he enters the forest.\nT4: The time when Maridan enters the forest at dawn.\nT5: The time when Maridan decides to follow the sounds in the forest.\nT6: The time when Maridan follows the sounds and discovers the hooded figures performing a ritual.\nT7: The time when Maridan prepares to fight the hooded figures.\nT8: The time when the hooded figures disappear, leaving behind a dark mist, and Maridan searches the clearing.\nT9: The time when Maridan returns to the order and informs the king about the hooded figures and the dark ritual.\n",
    "new_declarations": "maridan: Maridan, a named character\nhooded_figures: hooded figures, a group of characters\ndark_mist: dark mist, a type of mist\nclearing: clearing, a location\norder: order, a group\nking: king, a character\nkingdom: kingdom, a location\nthreats: threats, a concept\nritual: ritual, an event\n\ndisappear(a, t): object [a] disappear for time [t]\nleave_behind(a, b, t): object [a] leaves behind object [b] for time [t]\nfeel_emotion(a, b, t): character [a] feels emotion [b] for time [t]\nsearch_location(a, b, t): character [a] searches location [b] for time [t]\nreturn_to(a, b, t): character [a] returns to [b] for time [t]\nreport_to(a, b, c, t): character [a] reports [b] to [c] for time [t]\nvow_to(a, b, t): character [a] vows to [b] for time [t]\nwitness_event(a, b, t): character [a] witnesses event [b] for time [t]\ninform_about(a, b, c, t): character [a] informs character [b] about object [c] for time [t]\n",
    "pseudo_predefinitions": "['forall(a b t). report_to(a, b, king, t) -> inform_about(a, king, b, t)']",
    "formula": "Scope: global\nForAll([a, b, t],\n       Implies(report_to(a, b, king, t),\n               inform_about(a, king, b, t)))\ndisappear(hooded_figures, T8)\nleave_behind(hooded_figures, dark_mist, T8)\nExists(e, feel_emotion(maridan, e, T8))\nsearch_location(maridan, clearing, T8)\nreturn_to(maridan, order, T9)\nreport_to(maridan, hooded_figures, king, T9)\nreport_to(maridan, ritual, king, T9)\nExists(a, vow_to(maridan, a, T8))\ninform_about(maridan, king, hooded_figures, T9)\ninform_about(maridan, king, ritual, T9)\n",
    "unsat_formulas": []
  },
  {
    "conversation": "AI: The king was furious about Maridan's report. He relieved Maridan of his duties and sent him to the dungeons for failing to protect the kingdom. Maridan, now a prisoner, vows to escape and continue his quest to uncover the truth behind the mysterious disappearances. He knows that he must find a way to clear his name and prove his loyalty to the king.\n(User: Maridan starts planning his escape from the dungeons.)",
    "new_timeline": "T0: The time before Maridan receives the secret mission from the king.\nT1: The time when Maridan receives the secret mission and sets out on his quest.\nT2: The time when Maridan decides to gather information from the villagers and speaks with them.\nT3: The time when Maridan plans to enter the forest at dawn and the time before he enters the forest.\nT4: The time when Maridan enters the forest at dawn.\nT5: The time when Maridan decides to follow the sounds in the forest.\nT6: The time when Maridan follows the sounds and discovers the hooded figures performing a ritual.\nT7: The time when Maridan prepares to fight the hooded figures.\nT8: The time when the hooded figures disappear, leaving behind a dark mist, and Maridan searches the clearing.\nT9: The time when Maridan returns to the order and informs the king about the hooded figures and the dark ritual.\nT10: The time when the king was furious and Maridan is imprisoned.\nT11: The time when Maridan starts planning his escape from the dungeons.\n",
    "new_declarations": "king: king, a character\nmaridan: Maridan, a named character\nreport: report, a type of information\nduties: duties, a type of task\ndungeons: dungeons, a location\nkingdom: kingdom, a location\ndisappearances: disappearances, an event\ntruth: truth, a concept\nprisoner: prisoner, a character\nescape: escape, an event\nname: name, a concept\nloyalty: loyalty, a concept\nquest: quest, a task\n\nfeel_emotion(a, b, t): character [a] feels emotion [b] for time [t]\nreport_to(a, b, c, t): character [a] reports [b] to [c] for time [t]\nrelieve_of(a, b, c, t): character [a] relieves character [b] of object [c] for time [t]\nsend_to(a, b, c, t): character [a] sends character [b] to location [c] for time [t]\nfail_to(a, b, t): character [a] fails to [b] for time [t]\nprotects_location(a, b, t): character [a] protects location [b] for time [t]\nvow_to(a, b, t): character [a] vows to [b] for time [t]\ncontinue_quest(a, b, t): character [a] continues [b] for time [t]\nuncover_object(a, b, t): character [a] uncovers object [b] for time [t]\noccur_in(a, b, t): event [a] occurs in [b] for time [t]\nis_prisoner(a, b, t): character [a] is a [b] for time [t]\nplans_event(a, b, t): character [a] plans event [b] for time [t]\nclear_object(a, b, t): character [a] clears object [b] for time [t]\nprove_object(a, b, c, t): character [a] proves object [b] to [c] for time [t]\n",
    "pseudo_predefinitions": "['is_prisoner(a, [exclusive_arg], [free_arg])', 'forall(a b c t). report_to(a, b, c, t) -> inform_about(a, c, b, t)', 'forall(a b t). is_a(a, prisoner, t) <-> is_prisoner(a, prisoner, t)', 'forall(a b x t). uncover_object(x, b, t) -> finds_object(x, b, truth, t)', 'forall(a b t). occur_in(a, b, t) -> occur_at(a, b, t)']",
    "formula": "Scope: global\nForAll([a, b1, b2, t1, t2],\n       Implies(And(is_prisoner(a, b1, t1),\n                   is_prisoner(a, b2, t2)),\n               b1 == b2))\nForAll([a, b, c, t],\n       Implies(report_to(a, b, c, t),\n               inform_about(a, c, b, t)))\nForAll([a, b, t],\n       is_a(a, prisoner, t) == is_prisoner(a, prisoner, t))\nForAll([a, b, x, t],\n       Implies(uncover_object(x, b, t),\n               finds_object(x, b, truth, t)))\nForAll([a, b, t],\n       Implies(occur_in(a, b, t), occur_at(a, b, t)))\nfeel_emotion(king, fury, T10)\nreport_to(maridan, report, king, T10)\nrelieve_of(king, maridan, duties, T10)\nsend_to(king, maridan, dungeons, T10)\nis_prisoner(maridan, prisoner, T10)\nvow_to(maridan, escape, T10)\ncontinue_quest(maridan, quest, T10)\nplans_event(maridan, escape, T11)\nT10 < T11\n",
    "unsat_formulas": []
  },
  {
    "conversation": "AI: Maridan begins to observe the guards' routines and looks for weaknesses in the dungeon's security. As a former sergeant, he knows how to exploit such vulnerabilities. He manages to find a loose stone in the wall of his cell and starts digging a tunnel. After several days of careful planning and hard work, he finally creates an escape route.\n(User: Maridan waits for the right moment when the guards are distracted to make his escape.)",
    "new_timeline": "T0: The time before Maridan receives the secret mission from the king.\nT1: The time when Maridan receives the secret mission and sets out on his quest.\nT2: The time when Maridan decides to gather information from the villagers and speaks with them.\nT3: The time when Maridan plans to enter the forest at dawn and the time before he enters the forest.\nT4: The time when Maridan enters the forest at dawn.\nT5: The time when Maridan decides to follow the sounds in the forest.\nT6: The time when Maridan follows the sounds and discovers the hooded figures performing a ritual.\nT7: The time when Maridan prepares to fight the hooded figures.\nT8: The time when the hooded figures disappear, leaving behind a dark mist, and Maridan searches the clearing.\nT9: The time when Maridan returns to the order and informs the king about the hooded figures and the dark ritual.\nT10: The time when the king was furious and Maridan is imprisoned.\nT11: The time when Maridan starts planning his escape from the dungeons.\nT12: The time when Maridan observes the guards' routines and digs a tunnel.\nT13: The time when Maridan waits for the right moment to escape.\n",
    "new_declarations": "maridan: Maridan, a named character\nguards: guards, a group of characters\nroutines: routines, a set of actions\nweaknesses: weaknesses, a type of flaw\ndungeon: dungeon, a location\nsecurity: security, a state of being protected\nsergeant: sergeant, a military rank\nvulnerabilities: vulnerabilities, a type of weakness\nstone: stone, an item\nwall: wall, a part of a building\ncell: cell, a location\ntunnel: tunnel, a passage\nescape_route: escape route, a path to freedom\nmoment: moment, a point in time\nescape: escape, an event\n\nobserve_object(a, b, t): character [a] observes object [b] for time [t]\nare_of_type(a, b, t): object [a] is of type [b] for time [t]\nlook_for(a, b, t): character [a] looks for [b] for time [t]\nis_part_of(a, b, t): object [a] is part of [b] for time [t]\nexploit_object(a, b, t): character [a] exploits object [b] for time [t]\nfinds_object(a, b, t): character [a] finds object [b] for time [t]\nis_loose_in(a, b, t): object [a] is loose in [b] for time [t]\ndig_object(a, b, t): character [a] digs object [b] for time [t]\ncreate_object(a, b, t): character [a] creates object [b] for time [t]\nplans_event(a, b, t): character [a] plans event [b] for time [t]\nwaits_for(a, b, t): character [a] waits for [b] for time [t]\nis_distracted(a, t): character [a] is distracted for time [t]\n",
    "pseudo_predefinitions": "['forall(a b t). is_part_of(a, b, t) -> are_of_type(a, stone, t)', 'forall(a b t). dig_object(a, b, t) -> create_object(a, b, t)', 'forall(a b t). finds_object(a, b, t) -> is_loose_in(b, a, t)', 'forall(a b t). plans_event(a, b, t) -> waits_for(a, b, t)', 'forall(a b t). exploit_object(a, b, t) -> observe_object(a, b, t)', 'forall(a b t). look_for(a, b, t) -> not(is_distracted(a, t))']",
    "formula": "Scope: global\nForAll([a, b, t],\n       Implies(is_part_of(a, b, t),\n               are_of_type(a, stone, t)))\nForAll([a, b, t],\n       Implies(dig_object(a, b, t), create_object(a, b, t)))\nForAll([a, b, t],\n       Implies(finds_object(a, b, t), is_loose_in(b, a, t)))\nForAll([a, b, t],\n       Implies(plans_event(a, b, t), waits_for(a, b, t)))\nForAll([a, b, t],\n       Implies(exploit_object(a, b, t),\n               observe_object(a, b, t)))\nForAll([a, b, t],\n       Implies(look_for(a, b, t), Not(is_distracted(a, t))))\nobserve_object(maridan, guards, T12)\nobserve_object(maridan, routines, T12)\nlook_for(maridan, weaknesses, T12)\nexploit_object(maridan, vulnerabilities, T12)\nfinds_object(maridan, stone, T12)\nis_loose_in(stone, wall, T12)\nis_part_of(wall, cell, T12)\ndig_object(maridan, tunnel, T12)\ncreate_object(maridan, escape_route, T12)\nwaits_for(maridan, moment, T13)\nExists(g,\n       And(are_of_type(g, guards, T13),\n           is_distracted(g, T13)))\nT11 < T12\nT12 < T13\n",
    "unsat_formulas": []
  },
  {
    "full_conversation": "AI: Maridan is a young sergeant serving in the king's knightly order. He is known for his bravery and loyalty. One day, he receives a secret mission from the king to investigate a series of mysterious disappearances in the kingdom. Maridan sets out on his quest, determined to uncover the truth and protect his people.\n(User: Maridan first decides to gather information from the villagers.)\nAI: Maridan visits the nearby village and speaks with the villagers. They tell him about strange noises coming from the forest at night and sightings of shadowy figures. Maridan takes note of their accounts and decides to investigate the forest next.\n(User: He plans to enter the forest at dawn, hoping to find clues about the disappearances.)\nAI: At dawn, Maridan enters the forest, armed with his sword and shield. The forest is dense and eerie, with sunlight barely penetrating through the thick canopy. As he ventures deeper, he hears rustling sounds and sees fleeting shadows. He remains cautious and alert, ready to confront any danger.\n(User: Maridan decides to follow the sounds, hoping they will lead him to the source of the mystery.)\nAI: Maridan follows the sounds cautiously, moving through the underbrush. He comes across a clearing where he sees a group of hooded figures performing a ritual. They seem to be summoning something dark and sinister. Maridan realizes that these figures are behind the disappearances and decides to confront them.\n(User: He prepares to fight the hooded figures, ready to protect the kingdom.)\nAI: As Maridan steps forward, the hooded figures suddenly disappeared, leaving behind a dark mist. Maridan feels a chill run down his spine but remains resolute. He searches the clearing for any clues and finds nothing, he had no choice but to return to the order and report his findings to the king. He vows to continue his investigation and protect the kingdom from any threats.\n(User: Maridan returns to the order and informs the king about the hooded figures and the dark ritual he witnessed.)\nAI: The king was furious about Maridan's report. He relieved Maridan of his duties and sent him to the dungeons for failing to protect the kingdom. Maridan, now a prisoner, vows to escape and continue his quest to uncover the truth behind the mysterious disappearances. He knows that he must find a way to clear his name and prove his loyalty to the king.\n(User: Maridan starts planning his escape from the dungeons.)\nAI: Maridan begins to observe the guards' routines and looks for weaknesses in the dungeon's security. As a former sergeant, he knows how to exploit such vulnerabilities. He manages to find a loose stone in the wall of his cell and starts digging a tunnel. After several days of careful planning and hard work, he finally creates an escape route.\n(User: Maridan waits for the right moment when the guards are distracted to make his escape.)",
    "full_formulas": "defaultdict(<class 'list'>, {'global': [is_a(maridan, sergeant, T1), serve_in(maridan, knightly_order, T1), receive_mission_from(maridan, mission, king, T1), occur_in(disappearances, kingdom, T1), investigate(maridan, disappearances, T1), gather_information_from(maridan, villagers, T2), T0 < T1, T1 < T2]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, t],\n       Implies(visits_location(a, b, t),\n               enter_location_at(a, b, t, t))), ForAll([a, b, t],\n       Implies(are_of_type(a, noises, t), occur_in(a, b, t))), ForAll([a, b, t],\n       Implies(investigate(a, b, t),\n               gather_information_from(a, b, t))), visits_location(maridan, village, T2), speaks_with(maridan, villagers, T2), gather_information_from(maridan, villagers, T2), occur_in(noises, forest, night), occur_at(sightings, night, forest), are_of_type(noises, noises, night), are_of_type(sightings, sightings, night), are_of_type(shadowy_figures, shadowy_figures, night), takes_note_of(maridan, accounts, T2), investigate(maridan, forest, T3), enter_location_at(maridan, forest, dawn, T3), T0 < T1, T1 < T2, T2 < T3]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, c, t],\n       Implies(enter_location_at(a, b, c, t),\n               visits_location(a, b, t))), enter_location_at(maridan, forest, dawn, T4), is_armed_with(maridan, sword, T4), is_armed_with(maridan, shield, T4), is_dense(forest, T4), is_eerie(forest, T4), Not(penetrate_location(sunlight, canopy, T4)), hears_sound(maridan, rustling_sounds, T4), sees_object(maridan, shadows, T4), is_cautious(maridan, T4), is_alert(maridan, T4), follow_object(maridan, sounds, T5), lead_to(sounds, mystery, T5), T3 < T4, T4 < T5]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b],\n       Implies(confronts_object(a, b, t),\n               prepares_to_fight(a, b, t))), follow_object(maridan, sounds, T6), move_through(maridan, underbrush, T6), comes_across(maridan, clearing, T6), sees_object(maridan, hooded_figures, T6), perform_event(hooded_figures, ritual, T6), is_behind(hooded_figures, disappearances, T6), confronts_object(maridan, hooded_figures, T6), prepares_to_fight(maridan, hooded_figures, T7), protects_location(maridan, kingdom, T7)]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, t],\n       Implies(report_to(a, b, king, t),\n               inform_about(a, king, b, t))), disappear(hooded_figures, T8), leave_behind(hooded_figures, dark_mist, T8), Exists(e, feel_emotion(maridan, e, T8)), search_location(maridan, clearing, T8), return_to(maridan, order, T9), report_to(maridan, hooded_figures, king, T9), report_to(maridan, ritual, king, T9), Exists(a, vow_to(maridan, a, T8)), inform_about(maridan, king, hooded_figures, T9), inform_about(maridan, king, ritual, T9)]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b1, b2, t1, t2],\n       Implies(And(is_prisoner(a, b1, t1),\n                   is_prisoner(a, b2, t2)),\n               b1 == b2)), ForAll([a, b, c, t],\n       Implies(report_to(a, b, c, t),\n               inform_about(a, c, b, t))), ForAll([a, b, t],\n       is_a(a, prisoner, t) == is_prisoner(a, prisoner, t)), ForAll([a, b, x, t],\n       Implies(uncover_object(x, b, t),\n               finds_object(x, b, truth, t))), ForAll([a, b, t],\n       Implies(occur_in(a, b, t), occur_at(a, b, t))), feel_emotion(king, fury, T10), report_to(maridan, report, king, T10), relieve_of(king, maridan, duties, T10), send_to(king, maridan, dungeons, T10), is_prisoner(maridan, prisoner, T10), vow_to(maridan, escape, T10), continue_quest(maridan, quest, T10), plans_event(maridan, escape, T11), T10 < T11]})\ndefaultdict(<class 'list'>, {'global': [ForAll([a, b, t],\n       Implies(is_part_of(a, b, t),\n               are_of_type(a, stone, t))), ForAll([a, b, t],\n       Implies(dig_object(a, b, t), create_object(a, b, t))), ForAll([a, b, t],\n       Implies(finds_object(a, b, t), is_loose_in(b, a, t))), ForAll([a, b, t],\n       Implies(plans_event(a, b, t), waits_for(a, b, t))), ForAll([a, b, t],\n       Implies(exploit_object(a, b, t),\n               observe_object(a, b, t))), ForAll([a, b, t],\n       Implies(look_for(a, b, t), Not(is_distracted(a, t)))), observe_object(maridan, guards, T12), observe_object(maridan, routines, T12), look_for(maridan, weaknesses, T12), exploit_object(maridan, vulnerabilities, T12), finds_object(maridan, stone, T12), is_loose_in(stone, wall, T12), is_part_of(wall, cell, T12), dig_object(maridan, tunnel, T12), create_object(maridan, escape_route, T12), waits_for(maridan, moment, T13), Exists(g,\n       And(are_of_type(g, guards, T13),\n           is_distracted(g, T13))), T11 < T12, T12 < T13]})",
    "full_declarations": "Objects:\nmaridan: Maridan, a named character\nsergeant: sergeant, a military rank\nking: king, a character\nknightly_order: knightly order, a group\nmission: mission, a task\ndisappearances: disappearances, an event\nkingdom: kingdom, a location\nvillagers: villagers, a group of people\nvillage: village, a location\nnoises: noises, a type of sound\nforest: forest, a location\nnight: night, a time\nsightings: sightings, an event\nshadowy_figures: shadowy figures, a group of characters\naccounts: accounts, a type of information\ndawn: dawn, a time\nclues: clues, a type of information\nsword: sword, an item\nshield: shield, an item\nsunlight: sunlight, a type of light\ncanopy: canopy, a part of the forest\nrustling_sounds: rustling sounds, a type of sound\nshadows: shadows, a visual element\ndanger: danger, a concept\nsounds: sounds, a type of sound\nmystery: mystery, a concept\nunderbrush: underbrush, a part of the forest\nclearing: clearing, a location\nhooded_figures: hooded figures, a group of characters\nritual: ritual, an event\ndark_mist: dark mist, a type of mist\norder: order, a group\nthreats: threats, a concept\nreport: report, a type of information\nduties: duties, a type of task\ndungeons: dungeons, a location\ntruth: truth, a concept\nprisoner: prisoner, a character\nescape: escape, an event\nname: name, a concept\nloyalty: loyalty, a concept\nquest: quest, a task\nguards: guards, a group of characters\nroutines: routines, a set of actions\nweaknesses: weaknesses, a type of flaw\ndungeon: dungeon, a location\nsecurity: security, a state of being protected\nvulnerabilities: vulnerabilities, a type of weakness\nstone: stone, an item\nwall: wall, a part of a building\ncell: cell, a location\ntunnel: tunnel, a passage\nescape_route: escape route, a path to freedom\nmoment: moment, a point in time\nRelations:\nis_a(a, b, t): character [a] is a [b] for time [t]\nserve_in(a, b, t): character [a] serves in [b] for time [t]\nreceive_mission_from(a, b, c, t): character [a] receives [b] from [c] for time [t]\ninvestigate(a, b, t): character [a] investigates [b] for time [t]\noccur_in(a, b, t): event [a] occurs in [b] for time [t]\ngather_information_from(a, b, t): character [a] gathers information from [b] for time [t]\nvisits_location(a, b, t): character [a] visits location [b] for time [t]\nspeaks_with(a, b, t): character [a] speaks with [b] for time [t]\noccur_at(a, b, t): event [a] occurs at [b] for time [t]\nare_of_type(a, b, t): object [a] is of type [b] for time [t]\ntakes_note_of(a, b, t): character [a] takes note of [b] for time [t]\nenter_location_at(a, b, c, t): character [a] enters location [b] at time [c] for time [t]\nfinds_object(a, b, t): character [a] finds object [b] for time [t]\nis_armed_with(a, b, t): character [a] is armed with item [b] for time [t]\nis_dense(a, t): location [a] is dense for time [t]\nis_eerie(a, t): location [a] is eerie for time [t]\npenetrate_location(a, b, t): object [a] penetrates location [b] for time [t]\nhears_sound(a, b, t): character [a] hears sound [b] for time [t]\nsees_object(a, b, t): character [a] sees object [b] for time [t]\nis_cautious(a, t): character [a] is cautious for time [t]\nis_alert(a, t): character [a] is alert for time [t]\nconfronts_object(a, b, t): character [a] confronts object [b] for time [t]\nfollow_object(a, b, t): character [a] follows object [b] for time [t]\nlead_to(a, b, t): object [a] leads to object [b] for time [t]\nmove_through(a, b, t): character [a] moves through [b] for time [t]\ncomes_across(a, b, t): character [a] comes across [b] for time [t]\nperform_event(a, b, t): character [a] performs event [b] for time [t]\nsummon_object(a, b, t): character [a] summons object [b] for time [t]\nis_behind(a, b, t): object [a] is behind object [b] for time [t]\nprotects_location(a, b, t): character [a] protects location [b] for time [t]\nprepares_to_fight(a, b, t): character [a] prepares to fight [b] for time [t]\ndisappear(a, t): object [a] disappear for time [t]\nleave_behind(a, b, t): object [a] leaves behind object [b] for time [t]\nfeel_emotion(a, b, t): character [a] feels emotion [b] for time [t]\nsearch_location(a, b, t): character [a] searches location [b] for time [t]\nreturn_to(a, b, t): character [a] returns to [b] for time [t]\nreport_to(a, b, c, t): character [a] reports [b] to [c] for time [t]\nvow_to(a, b, t): character [a] vows to [b] for time [t]\nwitness_event(a, b, t): character [a] witnesses event [b] for time [t]\ninform_about(a, b, c, t): character [a] informs character [b] about object [c] for time [t]\nrelieve_of(a, b, c, t): character [a] relieves character [b] of object [c] for time [t]\nsend_to(a, b, c, t): character [a] sends character [b] to location [c] for time [t]\nfail_to(a, b, t): character [a] fails to [b] for time [t]\ncontinue_quest(a, b, t): character [a] continues [b] for time [t]\nuncover_object(a, b, t): character [a] uncovers object [b] for time [t]\nis_prisoner(a, b, t): character [a] is a [b] for time [t]\nplans_event(a, b, t): character [a] plans event [b] for time [t]\nclear_object(a, b, t): character [a] clears object [b] for time [t]\nprove_object(a, b, c, t): character [a] proves object [b] to [c] for time [t]\nobserve_object(a, b, t): character [a] observes object [b] for time [t]\nlook_for(a, b, t): character [a] looks for [b] for time [t]\nis_part_of(a, b, t): object [a] is part of [b] for time [t]\nexploit_object(a, b, t): character [a] exploits object [b] for time [t]\nis_loose_in(a, b, t): object [a] is loose in [b] for time [t]\ndig_object(a, b, t): character [a] digs object [b] for time [t]\ncreate_object(a, b, t): character [a] creates object [b] for time [t]\nwaits_for(a, b, t): character [a] waits for [b] for time [t]\nis_distracted(a, t): character [a] is distracted for time [t]\n",
    "full_timeline": "T0: The time before Maridan receives the secret mission from the king.\nT1: The time when Maridan receives the secret mission and sets out on his quest.\nT2: The time when Maridan decides to gather information from the villagers and speaks with them.\nT3: The time when Maridan plans to enter the forest at dawn and the time before he enters the forest.\nT4: The time when Maridan enters the forest at dawn.\nT5: The time when Maridan decides to follow the sounds in the forest.\nT6: The time when Maridan follows the sounds and discovers the hooded figures performing a ritual.\nT7: The time when Maridan prepares to fight the hooded figures.\nT8: The time when the hooded figures disappear, leaving behind a dark mist, and Maridan searches the clearing.\nT9: The time when Maridan returns to the order and informs the king about the hooded figures and the dark ritual.\nT10: The time when the king was furious and Maridan is imprisoned.\nT11: The time when Maridan starts planning his escape from the dungeons.\nT12: The time when Maridan observes the guards' routines and digs a tunnel.\nT13: The time when Maridan waits for the right moment to escape.\n",
    "full_scopes": ""
  }
]