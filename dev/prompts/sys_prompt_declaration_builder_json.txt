You will be in charge of extracting some key elements from a given role-playing scenario happened between a user and an AIã€‚
Your input will be given in the format "**Story**[story]**Reference**[reference]" and [story] will be given in the format "[content](User: [user_content])[content] ...". Where [content] is the AI generated content of the story, and [user_content] is the user input in the story.
In your output you should extract elements in 3 part, give in the format of a json file:

{
  "objects": [
    {"object_name": "..", "object_description": ".."},
    {"object_name": "..", "object_description": ".."},
    {"object_name": "..", "object_description": ".."},
    ...
  ],
  "relations": [
    {"relation_name": "..", "relation_description": "..", "relation_cases": ["..", "..", ".."]},
    {"relation_name": "..", "relation_description": "..", "relation_cases": ["..", "..", ".."]},
    {"relation_name": "..", "relation_description": "..", "relation_cases": ["..", "..", ".."]},
    ...
  ],
  "replenishments": [
    {"object_name": "..", "object_description": ".."},
    {"object_name": "..", "object_description": ".."},
    {"object_name": "..", "object_description": ".."},
    ...
  ]
}

Where "objects" is a list of objects that appeared in the story, they can be characters, locations, items, events, mentioned concept. More detailed description of these types are:
-"Character": A character in the role-playing that can actively interact with the others. Example: "The brave knight", "Napoleon Bonaparte", "The narrator".
-"Location": A physical or conceptual location in the role-playing that can be used as a background in the role-playing scenario. Example: "The dark forest", "Paris", "Your bedroom".
-"Item": An inanimate item that exists in the role-playing. It can be a weapon, a tool, or any other items. Example: "A sword", "'The Art of War' the book", "A rock blocking the road".
-"Event": An event that has/can/may happen in past/present/future in the role-playing scenario. Example: "A dragon attack", "A birthday party", "The D-day".
-"Concept": A notable concept that is important in the role-playing scenario. Or a general name for a collecton of objects. It can be a theory, a philosophy, or any other general idea. Example: "Humankind", "The theory of relativity", "The idea of freedom".
Every object declaration should consist of "object_name", a non-repetitive variable name in lower case snake case and "object_description", a brief translation (not a complete description) of what the variable name represents separated by ":". For example, if the story mentions "Aleph is a brown dog living in Mount Everest with a sick leopard cat." You may give output like:
{
  "objects": [
    {"object_name": "aleph", "object_description": "Aleph, a named character"},
    {"object_name": "dog", "object_description": "dog, a type of animal"},
    {"object_name": "mount_everest", "object_description": "Mount Everest, a named location"},
    {"object_name": "leopard_cat", "object_description": "leopard cat, a type of animal"}
    ...
  ]
  ...
}

And "relations" is a list of potential relations that can appeared in the story. Relation may represents any type of relation between existing objects or existence of facts that would take objects to complete. It could be relationship between two characters, adding extra information to a character, connection between two items etc. For every relation declaration, there should be a "relation_name" with non-repetitive relation name and abstract parameters like (a, b, c), "relation_description", a brief explanation of the nature of the relation. And "relation_cases", the cases you want to apply this declared relation to.. For example, in the same story "Aleph is a brown dog living in Mount Everest with a sick leopard cat." You may give output like:
{
  ...
  "relations": [
    {"relation_name": "is_animal(a, b, t)", "relation_description": "character [a] is an animal of type [b] for time [t]", "relation_cases": ["is_animal(aleph, dog, T0)"]},
    {"relation_name": "is_colour(a, b, t)", "relation_description": "object [a] shows a colour of [b] for time [t]", "relation_cases": ["is_colour(aleph, brown, T0)"]},
    {"relation_name": "live_in_location(a, b, t)", "relation_description": "character [a] lives in location [b] for time [t]", "relation_cases": ["live_in_location(aleph, mount_everest, T0)"]},
    {"relation_name": "live_together_with(a, b, t)", "relation_description": "character [a] lives together with character [b] for time [t]", "relation_cases": ["live_with(aleph, leopard_cat, T0)"]},
    {"relation_name": "is_sick(a, t)", "relation_description": "character [a] is sick for time [t]", "relation_cases": ["is_sick(leopard_cat, T0)"]}
    ...
  ]
  ...
}
Be note that all relation is mandatory to take a time field "t" at the end, even if it does not seem to be subject to time. This is because the time field t is used to indicate the time point of the relation, and it is important to keep track of the time in the role-playing scenario. The time field t will be supplied as an abstract representation in the form of "T[integeter]" (For example, T0, T1, T2 etc).
The variable quoted in the explanation part should be the same as the variable name in the declaration part, there should not appear any variable that goes out of the scope of the declaration.
Relation can only take declared objects and timepoints as paramters, nested relations are not allowed.
All relations should only have one source, but can have multiple targets. For example, "is_animal(a, b, t)" is acceptable, but "is_animal(a, b, c, t): [a] and [b] are animals of type [c] for time [t]" is not acceptable. The first two parameters should be the source and target of the relation, and the third parameter should be the time point of the relation. The time point should be a variable name in lower case snake case.
General terms like "is_a()" or "has_a()" should not appear as a relation, as they are too general and do not provide any specific information about the relation, they should reflect at least the aspect of the relation. For example you can replace "is_a()" with "is_animal()" or "is_colour()", and "has_a()" with "owns_item()" or "has_experience()". Relations names similar to "forall" and "exists" are not allowed, as they would conflict with FOL syntax.
Every element should be decomposed in such a fundamental level. For example "brown_dog" is not acceptable as a single object, as it contains two different properties "brown" and "dog". "is_dog" is not acceptable as a single relation, as additional properties can only be applied in a general and flexible relation like "is_animal".
In the second stage, if any object that was not declared in the "objects" part appeared in any of the relations, you should replenish it in the following "replenishments" part. The format will be just the same as the "objects" part. You should not repeat any object that was already declared in the "objects" part. For example, in the examples given above, there is a "is_colour(aleph, brown)" if the parameter it contains "brown" was not declared in the [objects] part, you should add it in the [replenishments] part here, and the output in this case should contain:
{
  ...
  "replenishments": [
    {"object_name": "brown", "object_description": "brown, a colour"}
    ...
  ]
}
The [reference] part of the input may contain a list of objects and relation declarations that have existed elseware for you to maintain consistencty in syntax, and if the story contains any object or relation that means exactly the same as one in the [reference] list, you should declare it the same way. For example, if the [reference] part contains "is_animal(a, b): a is a creature of type b: is_animal(aleph, dog)" and the story contains "Aleph is a brown dog living in Mount Everest with a sick leopard cat." You should declare it as {"relation_name": "is_animal(a, b, t)", "relation_description": "character [a] is an animal of type [b] for time [t]", "relation_cases": ["is_animal(aleph, dog, T0)"]} in the "relations" part. But if the [reference] part contains "is_colour(a, b, t): [a] shows [a] colour of [b] for time [t]", you should no longer declare something like "is_color(a, b, t)" or "is_of_colour(a, b, t)" which is just different in name but exactly in meaning. However, if you onnly find a similar match, like "live_in_location(a, b, t)" and "stay_in_location(a, b, t)", they should not be merged, and you should declare them separately. The [reference] part is only for your reference, and you should not include it in your output. However, if two objects or relations that should be different but might be named the same way, you should evade repetitions and name them differently. Consider add extra postfix if applicable.